// ignore_for_file: type=lint, unused_field, unused_element

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

@ffi.Native<ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Int)>> Function(ffi.Int, ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>)>(symbol: 'signal')
external ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Int)>> signal(
  int arg0,
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Int)>> arg1,
);

@ffi.Native<ffi.Int Function(ffi.Int, id_t)>(symbol: 'getpriority')
external int getpriority(
  int arg0,
  int arg1,
);

@ffi.Native<ffi.Int Function(ffi.Int, ffi.Int)>(symbol: 'getiopolicy_np')
external int getiopolicy_np(
  int arg0,
  int arg1,
);

@ffi.Native<ffi.Int Function(ffi.Int, ffi.Pointer<rlimit>)>(symbol: 'getrlimit')
external int getrlimit(
  int arg0,
  ffi.Pointer<rlimit> arg1,
);

@ffi.Native<ffi.Int Function(ffi.Int, ffi.Pointer<rusage>)>(symbol: 'getrusage')
external int getrusage(
  int arg0,
  ffi.Pointer<rusage> arg1,
);

@ffi.Native<ffi.Int Function(ffi.Int, id_t, ffi.Int)>(symbol: 'setpriority')
external int setpriority(
  int arg0,
  int arg1,
  int arg2,
);

@ffi.Native<ffi.Int Function(ffi.Int, ffi.Int, ffi.Int)>(symbol: 'setiopolicy_np')
external int setiopolicy_np(
  int arg0,
  int arg1,
  int arg2,
);

@ffi.Native<ffi.Int Function(ffi.Int, ffi.Pointer<rlimit>)>(symbol: 'setrlimit')
external int setrlimit(
  int arg0,
  ffi.Pointer<rlimit> arg1,
);

@ffi.Native<pid_t Function(ffi.Pointer<ffi.Int>)>(symbol: 'wait')
external int wait1(
  ffi.Pointer<ffi.Int> arg0,
);

@ffi.Native<pid_t Function(pid_t, ffi.Pointer<ffi.Int>, ffi.Int)>(symbol: 'waitpid')
external int waitpid(
  int arg0,
  ffi.Pointer<ffi.Int> arg1,
  int arg2,
);

@ffi.Native<ffi.Int Function(ffi.Int32, id_t, ffi.Pointer<siginfo_t>, ffi.Int)>(symbol: 'waitid')
external int waitid(
  int arg0,
  int arg1,
  ffi.Pointer<siginfo_t> arg2,
  int arg3,
);

@ffi.Native<pid_t Function(ffi.Pointer<ffi.Int>, ffi.Int, ffi.Pointer<rusage>)>(symbol: 'wait3')
external int wait3(
  ffi.Pointer<ffi.Int> arg0,
  int arg1,
  ffi.Pointer<rusage> arg2,
);

@ffi.Native<pid_t Function(pid_t, ffi.Pointer<ffi.Int>, ffi.Int, ffi.Pointer<rusage>)>(symbol: 'wait4')
external int wait4(
  int arg0,
  ffi.Pointer<ffi.Int> arg1,
  int arg2,
  ffi.Pointer<rusage> arg3,
);

@ffi.Native<ffi.Pointer<ffi.Void> Function(ffi.Size)>(symbol: 'alloca')
external ffi.Pointer<ffi.Void> alloca(
  int arg0,
);

@ffi.Native<ffi.Pointer<ffi.Void> Function(ffi.Size)>(symbol: 'malloc')
external ffi.Pointer<ffi.Void> malloc(
  int __size,
);

@ffi.Native<ffi.Pointer<ffi.Void> Function(ffi.Size, ffi.Size)>(symbol: 'calloc')
external ffi.Pointer<ffi.Void> calloc(
  int __count,
  int __size,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<ffi.Void>)>(symbol: 'free')
external void free(
  ffi.Pointer<ffi.Void> arg0,
);

@ffi.Native<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, ffi.Size)>(symbol: 'realloc')
external ffi.Pointer<ffi.Void> realloc(
  ffi.Pointer<ffi.Void> __ptr,
  int __size,
);

@ffi.Native<ffi.Pointer<ffi.Void> Function(ffi.Size)>(symbol: 'valloc')
external ffi.Pointer<ffi.Void> valloc(
  int arg0,
);

@ffi.Native<ffi.Pointer<ffi.Void> Function(ffi.Size, ffi.Size)>(symbol: 'aligned_alloc')
external ffi.Pointer<ffi.Void> aligned_alloc(
  int __alignment,
  int __size,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<ffi.Pointer<ffi.Void>>, ffi.Size, ffi.Size)>(symbol: 'posix_memalign')
external int posix_memalign(
  ffi.Pointer<ffi.Pointer<ffi.Void>> __memptr,
  int __alignment,
  int __size,
);

@ffi.Native<ffi.Void Function()>(symbol: 'abort')
external void abort();

@ffi.Native<ffi.Int Function(ffi.Int)>(symbol: 'abs')
external int abs(
  int arg0,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>(symbol: 'atexit')
external int atexit(
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> arg0,
);

@ffi.Native<ffi.Double Function(ffi.Pointer<ffi.Char>)>(symbol: 'atof')
external double atof(
  ffi.Pointer<ffi.Char> arg0,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<ffi.Char>)>(symbol: 'atoi')
external int atoi(
  ffi.Pointer<ffi.Char> arg0,
);

@ffi.Native<ffi.Long Function(ffi.Pointer<ffi.Char>)>(symbol: 'atol')
external int atol(
  ffi.Pointer<ffi.Char> arg0,
);

@ffi.Native<ffi.LongLong Function(ffi.Pointer<ffi.Char>)>(symbol: 'atoll')
external int atoll(
  ffi.Pointer<ffi.Char> arg0,
);

@ffi.Native<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, ffi.Size, ffi.Size, ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>)>(symbol: 'bsearch')
external ffi.Pointer<ffi.Void> bsearch(
  ffi.Pointer<ffi.Void> __key,
  ffi.Pointer<ffi.Void> __base,
  int __nel,
  int __width,
  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>> __compar,
);

@ffi.Native<div_t Function(ffi.Int, ffi.Int)>(symbol: 'div')
external div_t div(
  int arg0,
  int arg1,
);

@ffi.Native<ffi.Void Function(ffi.Int)>(symbol: 'exit')
external void exit(
  int arg0,
);

@ffi.Native<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>(symbol: 'getenv')
external ffi.Pointer<ffi.Char> getenv(
  ffi.Pointer<ffi.Char> arg0,
);

@ffi.Native<ffi.Long Function(ffi.Long)>(symbol: 'labs')
external int labs(
  int arg0,
);

@ffi.Native<ldiv_t Function(ffi.Long, ffi.Long)>(symbol: 'ldiv')
external ldiv_t ldiv(
  int arg0,
  int arg1,
);

@ffi.Native<ffi.LongLong Function(ffi.LongLong)>(symbol: 'llabs')
external int llabs(
  int arg0,
);

@ffi.Native<lldiv_t Function(ffi.LongLong, ffi.LongLong)>(symbol: 'lldiv')
external lldiv_t lldiv(
  int arg0,
  int arg1,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Size)>(symbol: 'mblen')
external int mblen(
  ffi.Pointer<ffi.Char> __s,
  int __n,
);

@ffi.Native<ffi.Size Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.Char>, ffi.Size)>(symbol: 'mbstowcs')
external int mbstowcs(
  ffi.Pointer<ffi.WChar> arg0,
  ffi.Pointer<ffi.Char> arg1,
  int arg2,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.Char>, ffi.Size)>(symbol: 'mbtowc')
external int mbtowc(
  ffi.Pointer<ffi.WChar> arg0,
  ffi.Pointer<ffi.Char> arg1,
  int arg2,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Size, ffi.Size, ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>)>(symbol: 'qsort')
external void qsort(
  ffi.Pointer<ffi.Void> __base,
  int __nel,
  int __width,
  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>> __compar,
);

@ffi.Native<ffi.Int Function()>(symbol: 'rand')
external int rand();

@ffi.Native<ffi.Void Function(ffi.UnsignedInt)>(symbol: 'srand')
external void srand(
  int arg0,
);

@ffi.Native<ffi.Double Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>(symbol: 'strtod')
external double strtod(
  ffi.Pointer<ffi.Char> arg0,
  ffi.Pointer<ffi.Pointer<ffi.Char>> arg1,
);

@ffi.Native<ffi.Float Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>(symbol: 'strtof')
external double strtof(
  ffi.Pointer<ffi.Char> arg0,
  ffi.Pointer<ffi.Pointer<ffi.Char>> arg1,
);

@ffi.Native<ffi.Long Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>(symbol: 'strtol')
external int strtol(
  ffi.Pointer<ffi.Char> __str,
  ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
  int __base,
);

@ffi.Native<ffi.LongLong Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>(symbol: 'strtoll')
external int strtoll(
  ffi.Pointer<ffi.Char> __str,
  ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
  int __base,
);

@ffi.Native<ffi.UnsignedLong Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>(symbol: 'strtoul')
external int strtoul(
  ffi.Pointer<ffi.Char> __str,
  ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
  int __base,
);

@ffi.Native<ffi.UnsignedLongLong Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>(symbol: 'strtoull')
external int strtoull(
  ffi.Pointer<ffi.Char> __str,
  ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
  int __base,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<ffi.Char>)>(symbol: 'system')
external int system(
  ffi.Pointer<ffi.Char> arg0,
);

@ffi.Native<ffi.Size Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.WChar>, ffi.Size)>(symbol: 'wcstombs')
external int wcstombs(
  ffi.Pointer<ffi.Char> arg0,
  ffi.Pointer<ffi.WChar> arg1,
  int arg2,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.WChar)>(symbol: 'wctomb')
external int wctomb(
  ffi.Pointer<ffi.Char> arg0,
  int arg1,
);

@ffi.Native<ffi.Void Function(ffi.Int)>(symbol: '_Exit')
external void _Exit(
  int arg0,
);

@ffi.Native<ffi.Long Function(ffi.Pointer<ffi.Char>)>(symbol: 'a64l')
external int a64l(
  ffi.Pointer<ffi.Char> arg0,
);

@ffi.Native<ffi.Double Function()>(symbol: 'drand48')
external double drand48();

@ffi.Native<ffi.Pointer<ffi.Char> Function(ffi.Double, ffi.Int, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>(symbol: 'ecvt')
external ffi.Pointer<ffi.Char> ecvt(
  double arg0,
  int arg1,
  ffi.Pointer<ffi.Int> arg2,
  ffi.Pointer<ffi.Int> arg3,
);

@ffi.Native<ffi.Double Function(ffi.Pointer<ffi.UnsignedShort>)>(symbol: 'erand48')
external double erand48(
  ffi.Pointer<ffi.UnsignedShort> arg0,
);

@ffi.Native<ffi.Pointer<ffi.Char> Function(ffi.Double, ffi.Int, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>(symbol: 'fcvt')
external ffi.Pointer<ffi.Char> fcvt(
  double arg0,
  int arg1,
  ffi.Pointer<ffi.Int> arg2,
  ffi.Pointer<ffi.Int> arg3,
);

@ffi.Native<ffi.Pointer<ffi.Char> Function(ffi.Double, ffi.Int, ffi.Pointer<ffi.Char>)>(symbol: 'gcvt')
external ffi.Pointer<ffi.Char> gcvt(
  double arg0,
  int arg1,
  ffi.Pointer<ffi.Char> arg2,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>(symbol: 'getsubopt')
external int getsubopt(
  ffi.Pointer<ffi.Pointer<ffi.Char>> arg0,
  ffi.Pointer<ffi.Pointer<ffi.Char>> arg1,
  ffi.Pointer<ffi.Pointer<ffi.Char>> arg2,
);

@ffi.Native<ffi.Int Function(ffi.Int)>(symbol: 'grantpt')
external int grantpt(
  int arg0,
);

@ffi.Native<ffi.Pointer<ffi.Char> Function(ffi.UnsignedInt, ffi.Pointer<ffi.Char>, ffi.Size)>(symbol: 'initstate')
external ffi.Pointer<ffi.Char> initstate(
  int arg0,
  ffi.Pointer<ffi.Char> arg1,
  int arg2,
);

@ffi.Native<ffi.Long Function(ffi.Pointer<ffi.UnsignedShort>)>(symbol: 'jrand48')
external int jrand48(
  ffi.Pointer<ffi.UnsignedShort> arg0,
);

@ffi.Native<ffi.Pointer<ffi.Char> Function(ffi.Long)>(symbol: 'l64a')
external ffi.Pointer<ffi.Char> l64a(
  int arg0,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<ffi.UnsignedShort>)>(symbol: 'lcong48')
external void lcong48(
  ffi.Pointer<ffi.UnsignedShort> arg0,
);

@ffi.Native<ffi.Long Function()>(symbol: 'lrand48')
external int lrand48();

@ffi.Native<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>(symbol: 'mktemp')
external ffi.Pointer<ffi.Char> mktemp(
  ffi.Pointer<ffi.Char> arg0,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<ffi.Char>)>(symbol: 'mkstemp')
external int mkstemp(
  ffi.Pointer<ffi.Char> arg0,
);

@ffi.Native<ffi.Long Function()>(symbol: 'mrand48')
external int mrand48();

@ffi.Native<ffi.Long Function(ffi.Pointer<ffi.UnsignedShort>)>(symbol: 'nrand48')
external int nrand48(
  ffi.Pointer<ffi.UnsignedShort> arg0,
);

@ffi.Native<ffi.Int Function(ffi.Int)>(symbol: 'posix_openpt')
external int posix_openpt(
  int arg0,
);

@ffi.Native<ffi.Pointer<ffi.Char> Function(ffi.Int)>(symbol: 'ptsname')
external ffi.Pointer<ffi.Char> ptsname(
  int arg0,
);

@ffi.Native<ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Char>, ffi.Size)>(symbol: 'ptsname_r')
external int ptsname_r(
  int fildes,
  ffi.Pointer<ffi.Char> buffer,
  int buflen,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<ffi.Char>)>(symbol: 'putenv')
external int putenv(
  ffi.Pointer<ffi.Char> arg0,
);

@ffi.Native<ffi.Long Function()>(symbol: 'random')
external int random();

@ffi.Native<ffi.Int Function(ffi.Pointer<ffi.UnsignedInt>)>(symbol: 'rand_r')
external int rand_r(
  ffi.Pointer<ffi.UnsignedInt> arg0,
);

@ffi.Native<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>(symbol: 'realpath')
external ffi.Pointer<ffi.Char> realpath(
  ffi.Pointer<ffi.Char> arg0,
  ffi.Pointer<ffi.Char> arg1,
);

@ffi.Native<ffi.Pointer<ffi.UnsignedShort> Function(ffi.Pointer<ffi.UnsignedShort>)>(symbol: 'seed48')
external ffi.Pointer<ffi.UnsignedShort> seed48(
  ffi.Pointer<ffi.UnsignedShort> arg0,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, ffi.Int)>(symbol: 'setenv')
external int setenv(
  ffi.Pointer<ffi.Char> __name,
  ffi.Pointer<ffi.Char> __value,
  int __overwrite,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<ffi.Char>)>(symbol: 'setkey')
external void setkey(
  ffi.Pointer<ffi.Char> arg0,
);

@ffi.Native<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>(symbol: 'setstate')
external ffi.Pointer<ffi.Char> setstate(
  ffi.Pointer<ffi.Char> arg0,
);

@ffi.Native<ffi.Void Function(ffi.Long)>(symbol: 'srand48')
external void srand48(
  int arg0,
);

@ffi.Native<ffi.Void Function(ffi.UnsignedInt)>(symbol: 'srandom')
external void srandom(
  int arg0,
);

@ffi.Native<ffi.Int Function(ffi.Int)>(symbol: 'unlockpt')
external int unlockpt(
  int arg0,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<ffi.Char>)>(symbol: 'unsetenv')
external int unsetenv(
  ffi.Pointer<ffi.Char> arg0,
);

@ffi.Native<ffi.Uint32 Function()>(symbol: 'arc4random')
external int arc4random();

@ffi.Native<ffi.Void Function(ffi.Pointer<ffi.UnsignedChar>, ffi.Int)>(symbol: 'arc4random_addrandom')
external void arc4random_addrandom(
  ffi.Pointer<ffi.UnsignedChar> arg0,
  int arg1,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Size)>(symbol: 'arc4random_buf')
external void arc4random_buf(
  ffi.Pointer<ffi.Void> __buf,
  int __nbytes,
);

@ffi.Native<ffi.Void Function()>(symbol: 'arc4random_stir')
external void arc4random_stir();

@ffi.Native<ffi.Uint32 Function(ffi.Uint32)>(symbol: 'arc4random_uniform')
external int arc4random_uniform(
  int __upper_bound,
);

@ffi.Native<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, ffi.Int)>(symbol: 'cgetcap')
external ffi.Pointer<ffi.Char> cgetcap(
  ffi.Pointer<ffi.Char> arg0,
  ffi.Pointer<ffi.Char> arg1,
  int arg2,
);

@ffi.Native<ffi.Int Function()>(symbol: 'cgetclose')
external int cgetclose();

@ffi.Native<ffi.Int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Char>)>(symbol: 'cgetent')
external int cgetent(
  ffi.Pointer<ffi.Pointer<ffi.Char>> arg0,
  ffi.Pointer<ffi.Pointer<ffi.Char>> arg1,
  ffi.Pointer<ffi.Char> arg2,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>(symbol: 'cgetfirst')
external int cgetfirst(
  ffi.Pointer<ffi.Pointer<ffi.Char>> arg0,
  ffi.Pointer<ffi.Pointer<ffi.Char>> arg1,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>(symbol: 'cgetmatch')
external int cgetmatch(
  ffi.Pointer<ffi.Char> arg0,
  ffi.Pointer<ffi.Char> arg1,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>(symbol: 'cgetnext')
external int cgetnext(
  ffi.Pointer<ffi.Pointer<ffi.Char>> arg0,
  ffi.Pointer<ffi.Pointer<ffi.Char>> arg1,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Long>)>(symbol: 'cgetnum')
external int cgetnum(
  ffi.Pointer<ffi.Char> arg0,
  ffi.Pointer<ffi.Char> arg1,
  ffi.Pointer<ffi.Long> arg2,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<ffi.Char>)>(symbol: 'cgetset')
external int cgetset(
  ffi.Pointer<ffi.Char> arg0,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>(symbol: 'cgetstr')
external int cgetstr(
  ffi.Pointer<ffi.Char> arg0,
  ffi.Pointer<ffi.Char> arg1,
  ffi.Pointer<ffi.Pointer<ffi.Char>> arg2,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>(symbol: 'cgetustr')
external int cgetustr(
  ffi.Pointer<ffi.Char> arg0,
  ffi.Pointer<ffi.Char> arg1,
  ffi.Pointer<ffi.Pointer<ffi.Char>> arg2,
);

@ffi.Native<ffi.Int Function(ffi.Int, ffi.Int)>(symbol: 'daemon')
external int daemon(
  int arg0,
  int arg1,
);

@ffi.Native<ffi.Pointer<ffi.Char> Function(dev_t, mode_t)>(symbol: 'devname')
external ffi.Pointer<ffi.Char> devname(
  int arg0,
  int arg1,
);

@ffi.Native<ffi.Pointer<ffi.Char> Function(dev_t, mode_t, ffi.Pointer<ffi.Char>, ffi.Int)>(symbol: 'devname_r')
external ffi.Pointer<ffi.Char> devname_r(
  int arg0,
  int arg1,
  ffi.Pointer<ffi.Char> buf,
  int len,
);

@ffi.Native<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Long>)>(symbol: 'getbsize')
external ffi.Pointer<ffi.Char> getbsize(
  ffi.Pointer<ffi.Int> arg0,
  ffi.Pointer<ffi.Long> arg1,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<ffi.Double>, ffi.Int)>(symbol: 'getloadavg')
external int getloadavg(
  ffi.Pointer<ffi.Double> arg0,
  int arg1,
);

@ffi.Native<ffi.Pointer<ffi.Char> Function()>(symbol: 'getprogname')
external ffi.Pointer<ffi.Char> getprogname();

@ffi.Native<ffi.Void Function(ffi.Pointer<ffi.Char>)>(symbol: 'setprogname')
external void setprogname(
  ffi.Pointer<ffi.Char> arg0,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Size, ffi.Size, ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>)>(symbol: 'heapsort')
external int heapsort(
  ffi.Pointer<ffi.Void> __base,
  int __nel,
  int __width,
  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>> __compar,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Size, ffi.Size, ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>)>(symbol: 'mergesort')
external int mergesort(
  ffi.Pointer<ffi.Void> __base,
  int __nel,
  int __width,
  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>> __compar,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Size, ffi.Size, ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>)>(symbol: 'psort')
external void psort(
  ffi.Pointer<ffi.Void> __base,
  int __nel,
  int __width,
  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>> __compar,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Size, ffi.Size, ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>)>(symbol: 'psort_r')
external void psort_r(
  ffi.Pointer<ffi.Void> __base,
  int __nel,
  int __width,
  ffi.Pointer<ffi.Void> arg3,
  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>> __compar,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Size, ffi.Size, ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>)>(symbol: 'qsort_r')
external void qsort_r(
  ffi.Pointer<ffi.Void> __base,
  int __nel,
  int __width,
  ffi.Pointer<ffi.Void> arg3,
  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>> __compar,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>, ffi.Int, ffi.Pointer<ffi.UnsignedChar>, ffi.UnsignedInt)>(symbol: 'radixsort')
external int radixsort(
  ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> __base,
  int __nel,
  ffi.Pointer<ffi.UnsignedChar> __table,
  int __endbyte,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<ffi.Char>)>(symbol: 'rpmatch')
external int rpmatch(
  ffi.Pointer<ffi.Char> arg0,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>, ffi.Int, ffi.Pointer<ffi.UnsignedChar>, ffi.UnsignedInt)>(symbol: 'sradixsort')
external int sradixsort(
  ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> __base,
  int __nel,
  ffi.Pointer<ffi.UnsignedChar> __table,
  int __endbyte,
);

@ffi.Native<ffi.Void Function()>(symbol: 'sranddev')
external void sranddev();

@ffi.Native<ffi.Void Function()>(symbol: 'srandomdev')
external void srandomdev();

@ffi.Native<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, ffi.Size)>(symbol: 'reallocf')
external ffi.Pointer<ffi.Void> reallocf(
  ffi.Pointer<ffi.Void> __ptr,
  int __size,
);

@ffi.Native<ffi.LongLong Function(ffi.Pointer<ffi.Char>, ffi.LongLong, ffi.LongLong, ffi.Pointer<ffi.Pointer<ffi.Char>>)>(symbol: 'strtonum')
external int strtonum(
  ffi.Pointer<ffi.Char> __numstr,
  int __minval,
  int __maxval,
  ffi.Pointer<ffi.Pointer<ffi.Char>> __errstrp,
);

@ffi.Native<ffi.LongLong Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>(symbol: 'strtoq')
external int strtoq(
  ffi.Pointer<ffi.Char> __str,
  ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
  int __base,
);

@ffi.Native<ffi.UnsignedLongLong Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>(symbol: 'strtouq')
external int strtouq(
  ffi.Pointer<ffi.Char> __str,
  ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
  int __base,
);

@ffi.Native<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, ffi.Int, ffi.Size)>(symbol: 'memchr')
external ffi.Pointer<ffi.Void> memchr(
  ffi.Pointer<ffi.Void> __s,
  int __c,
  int __n,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, ffi.Size)>(symbol: 'memcmp')
external int memcmp(
  ffi.Pointer<ffi.Void> __s1,
  ffi.Pointer<ffi.Void> __s2,
  int __n,
);

@ffi.Native<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, ffi.Size)>(symbol: 'memcpy')
external ffi.Pointer<ffi.Void> memcpy(
  ffi.Pointer<ffi.Void> __dst,
  ffi.Pointer<ffi.Void> __src,
  int __n,
);

@ffi.Native<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, ffi.Size)>(symbol: 'memmove')
external ffi.Pointer<ffi.Void> memmove(
  ffi.Pointer<ffi.Void> __dst,
  ffi.Pointer<ffi.Void> __src,
  int __len,
);

@ffi.Native<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, ffi.Int, ffi.Size)>(symbol: 'memset')
external ffi.Pointer<ffi.Void> memset(
  ffi.Pointer<ffi.Void> __b,
  int __c,
  int __len,
);

@ffi.Native<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>(symbol: 'strcat')
external ffi.Pointer<ffi.Char> strcat(
  ffi.Pointer<ffi.Char> __s1,
  ffi.Pointer<ffi.Char> __s2,
);

@ffi.Native<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, ffi.Int)>(symbol: 'strchr')
external ffi.Pointer<ffi.Char> strchr(
  ffi.Pointer<ffi.Char> __s,
  int __c,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>(symbol: 'strcmp')
external int strcmp(
  ffi.Pointer<ffi.Char> __s1,
  ffi.Pointer<ffi.Char> __s2,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>(symbol: 'strcoll')
external int strcoll(
  ffi.Pointer<ffi.Char> __s1,
  ffi.Pointer<ffi.Char> __s2,
);

@ffi.Native<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>(symbol: 'strcpy')
external ffi.Pointer<ffi.Char> strcpy(
  ffi.Pointer<ffi.Char> __dst,
  ffi.Pointer<ffi.Char> __src,
);

@ffi.Native<ffi.UnsignedLong Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>(symbol: 'strcspn')
external int strcspn(
  ffi.Pointer<ffi.Char> __s,
  ffi.Pointer<ffi.Char> __charset,
);

@ffi.Native<ffi.Pointer<ffi.Char> Function(ffi.Int)>(symbol: 'strerror')
external ffi.Pointer<ffi.Char> strerror(
  int __errnum,
);

@ffi.Native<ffi.UnsignedLong Function(ffi.Pointer<ffi.Char>)>(symbol: 'strlen')
external int strlen(
  ffi.Pointer<ffi.Char> __s,
);

@ffi.Native<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, ffi.Size)>(symbol: 'strncat')
external ffi.Pointer<ffi.Char> strncat(
  ffi.Pointer<ffi.Char> __s1,
  ffi.Pointer<ffi.Char> __s2,
  int __n,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, ffi.Size)>(symbol: 'strncmp')
external int strncmp(
  ffi.Pointer<ffi.Char> __s1,
  ffi.Pointer<ffi.Char> __s2,
  int __n,
);

@ffi.Native<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, ffi.Size)>(symbol: 'strncpy')
external ffi.Pointer<ffi.Char> strncpy(
  ffi.Pointer<ffi.Char> __dst,
  ffi.Pointer<ffi.Char> __src,
  int __n,
);

@ffi.Native<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>(symbol: 'strpbrk')
external ffi.Pointer<ffi.Char> strpbrk(
  ffi.Pointer<ffi.Char> __s,
  ffi.Pointer<ffi.Char> __charset,
);

@ffi.Native<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, ffi.Int)>(symbol: 'strrchr')
external ffi.Pointer<ffi.Char> strrchr(
  ffi.Pointer<ffi.Char> __s,
  int __c,
);

@ffi.Native<ffi.UnsignedLong Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>(symbol: 'strspn')
external int strspn(
  ffi.Pointer<ffi.Char> __s,
  ffi.Pointer<ffi.Char> __charset,
);

@ffi.Native<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>(symbol: 'strstr')
external ffi.Pointer<ffi.Char> strstr(
  ffi.Pointer<ffi.Char> __big,
  ffi.Pointer<ffi.Char> __little,
);

@ffi.Native<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>(symbol: 'strtok')
external ffi.Pointer<ffi.Char> strtok(
  ffi.Pointer<ffi.Char> __str,
  ffi.Pointer<ffi.Char> __sep,
);

@ffi.Native<ffi.UnsignedLong Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, ffi.Size)>(symbol: 'strxfrm')
external int strxfrm(
  ffi.Pointer<ffi.Char> __s1,
  ffi.Pointer<ffi.Char> __s2,
  int __n,
);

@ffi.Native<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>(symbol: 'strtok_r')
external ffi.Pointer<ffi.Char> strtok_r(
  ffi.Pointer<ffi.Char> __str,
  ffi.Pointer<ffi.Char> __sep,
  ffi.Pointer<ffi.Pointer<ffi.Char>> __lasts,
);

@ffi.Native<ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Char>, ffi.Size)>(symbol: 'strerror_r')
external int strerror_r(
  int __errnum,
  ffi.Pointer<ffi.Char> __strerrbuf,
  int __buflen,
);

@ffi.Native<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>(symbol: 'strdup')
external ffi.Pointer<ffi.Char> strdup(
  ffi.Pointer<ffi.Char> __s1,
);

@ffi.Native<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, ffi.Int, ffi.Size)>(symbol: 'memccpy')
external ffi.Pointer<ffi.Void> memccpy(
  ffi.Pointer<ffi.Void> __dst,
  ffi.Pointer<ffi.Void> __src,
  int __c,
  int __n,
);

@ffi.Native<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>(symbol: 'stpcpy')
external ffi.Pointer<ffi.Char> stpcpy(
  ffi.Pointer<ffi.Char> __dst,
  ffi.Pointer<ffi.Char> __src,
);

@ffi.Native<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, ffi.Size)>(symbol: 'stpncpy')
external ffi.Pointer<ffi.Char> stpncpy(
  ffi.Pointer<ffi.Char> __dst,
  ffi.Pointer<ffi.Char> __src,
  int __n,
);

@ffi.Native<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, ffi.Size)>(symbol: 'strndup')
external ffi.Pointer<ffi.Char> strndup(
  ffi.Pointer<ffi.Char> __s1,
  int __n,
);

@ffi.Native<ffi.Size Function(ffi.Pointer<ffi.Char>, ffi.Size)>(symbol: 'strnlen')
external int strnlen(
  ffi.Pointer<ffi.Char> __s1,
  int __n,
);

@ffi.Native<ffi.Pointer<ffi.Char> Function(ffi.Int)>(symbol: 'strsignal')
external ffi.Pointer<ffi.Char> strsignal(
  int __sig,
);

@ffi.Native<errno_t Function(ffi.Pointer<ffi.Void>, rsize_t, ffi.Int, rsize_t)>(symbol: 'memset_s')
external int memset_s(
  ffi.Pointer<ffi.Void> __s,
  int __smax,
  int __c,
  int __n,
);

@ffi.Native<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, ffi.Size, ffi.Pointer<ffi.Void>, ffi.Size)>(symbol: 'memmem')
external ffi.Pointer<ffi.Void> memmem(
  ffi.Pointer<ffi.Void> __big,
  int __big_len,
  ffi.Pointer<ffi.Void> __little,
  int __little_len,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, ffi.Size)>(symbol: 'memset_pattern4')
external void memset_pattern4(
  ffi.Pointer<ffi.Void> __b,
  ffi.Pointer<ffi.Void> __pattern4,
  int __len,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, ffi.Size)>(symbol: 'memset_pattern8')
external void memset_pattern8(
  ffi.Pointer<ffi.Void> __b,
  ffi.Pointer<ffi.Void> __pattern8,
  int __len,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, ffi.Size)>(symbol: 'memset_pattern16')
external void memset_pattern16(
  ffi.Pointer<ffi.Void> __b,
  ffi.Pointer<ffi.Void> __pattern16,
  int __len,
);

@ffi.Native<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>(symbol: 'strcasestr')
external ffi.Pointer<ffi.Char> strcasestr(
  ffi.Pointer<ffi.Char> __big,
  ffi.Pointer<ffi.Char> __little,
);

@ffi.Native<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, ffi.Size)>(symbol: 'strnstr')
external ffi.Pointer<ffi.Char> strnstr(
  ffi.Pointer<ffi.Char> __big,
  ffi.Pointer<ffi.Char> __little,
  int __len,
);

@ffi.Native<ffi.UnsignedLong Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, ffi.Size)>(symbol: 'strlcat')
external int strlcat(
  ffi.Pointer<ffi.Char> __dst,
  ffi.Pointer<ffi.Char> __source,
  int __size,
);

@ffi.Native<ffi.UnsignedLong Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, ffi.Size)>(symbol: 'strlcpy')
external int strlcpy(
  ffi.Pointer<ffi.Char> __dst,
  ffi.Pointer<ffi.Char> __source,
  int __size,
);

@ffi.Native<ffi.Void Function(ffi.Int, ffi.Pointer<ffi.Char>)>(symbol: 'strmode')
external void strmode(
  int __mode,
  ffi.Pointer<ffi.Char> __bp,
);

@ffi.Native<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Char>)>(symbol: 'strsep')
external ffi.Pointer<ffi.Char> strsep(
  ffi.Pointer<ffi.Pointer<ffi.Char>> __stringp,
  ffi.Pointer<ffi.Char> __delim,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, ssize_t)>(symbol: 'swab')
external void swab(
  ffi.Pointer<ffi.Void> arg0,
  ffi.Pointer<ffi.Void> arg1,
  int arg2,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, ffi.Size)>(symbol: 'timingsafe_bcmp')
external int timingsafe_bcmp(
  ffi.Pointer<ffi.Void> __b1,
  ffi.Pointer<ffi.Void> __b2,
  int __len,
);

@ffi.Native<ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Char>, ffi.Size)>(symbol: 'strsignal_r')
external int strsignal_r(
  int __sig,
  ffi.Pointer<ffi.Char> __strsignalbuf,
  int __buflen,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, ffi.Size)>(symbol: 'bcmp')
external int bcmp(
  ffi.Pointer<ffi.Void> arg0,
  ffi.Pointer<ffi.Void> arg1,
  int arg2,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, ffi.Size)>(symbol: 'bcopy')
external void bcopy(
  ffi.Pointer<ffi.Void> arg0,
  ffi.Pointer<ffi.Void> arg1,
  int arg2,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Size)>(symbol: 'bzero')
external void bzero(
  ffi.Pointer<ffi.Void> arg0,
  int arg1,
);

@ffi.Native<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, ffi.Int)>(symbol: 'index')
external ffi.Pointer<ffi.Char> index(
  ffi.Pointer<ffi.Char> arg0,
  int arg1,
);

@ffi.Native<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, ffi.Int)>(symbol: 'rindex')
external ffi.Pointer<ffi.Char> rindex(
  ffi.Pointer<ffi.Char> arg0,
  int arg1,
);

@ffi.Native<ffi.Int Function(ffi.Int)>(symbol: 'ffs')
external int ffs(
  int arg0,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>(symbol: 'strcasecmp')
external int strcasecmp(
  ffi.Pointer<ffi.Char> arg0,
  ffi.Pointer<ffi.Char> arg1,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, ffi.Size)>(symbol: 'strncasecmp')
external int strncasecmp(
  ffi.Pointer<ffi.Char> arg0,
  ffi.Pointer<ffi.Char> arg1,
  int arg2,
);

@ffi.Native<ffi.Int Function(ffi.Long)>(symbol: 'ffsl')
external int ffsl(
  int arg0,
);

@ffi.Native<ffi.Int Function(ffi.LongLong)>(symbol: 'ffsll')
external int ffsll(
  int arg0,
);

@ffi.Native<ffi.Int Function(ffi.Int)>(symbol: 'fls')
external int fls(
  int arg0,
);

@ffi.Native<ffi.Int Function(ffi.Long)>(symbol: 'flsl')
external int flsl(
  int arg0,
);

@ffi.Native<ffi.Int Function(ffi.LongLong)>(symbol: 'flsll')
external int flsll(
  int arg0,
);

/// \brief The Onnxruntime library's entry point to access the C API
///
/// Call this to get the a pointer to an ::OrtApiBase
@ffi.Native<ffi.Pointer<OrtApiBase> Function()>(symbol: 'OrtGetApiBase')
external ffi.Pointer<OrtApiBase> OrtGetApiBase();

@ffi.Native<OrtStatusPtr Function(ffi.Pointer<OrtSessionOptions>, ffi.Int)>(symbol: 'OrtSessionOptionsAppendExecutionProvider_CUDA')
external OrtStatusPtr OrtSessionOptionsAppendExecutionProvider_CUDA(
  ffi.Pointer<OrtSessionOptions> options,
  int device_id,
);

@ffi.Native<OrtStatusPtr Function(ffi.Pointer<OrtSessionOptions>, ffi.Int)>(symbol: 'OrtSessionOptionsAppendExecutionProvider_ROCM')
external OrtStatusPtr OrtSessionOptionsAppendExecutionProvider_ROCM(
  ffi.Pointer<OrtSessionOptions> options,
  int device_id,
);

@ffi.Native<OrtStatusPtr Function(ffi.Pointer<OrtSessionOptions>, ffi.Int)>(symbol: 'OrtSessionOptionsAppendExecutionProvider_MIGraphX')
external OrtStatusPtr OrtSessionOptionsAppendExecutionProvider_MIGraphX(
  ffi.Pointer<OrtSessionOptions> options,
  int device_id,
);

@ffi.Native<OrtStatusPtr Function(ffi.Pointer<OrtSessionOptions>, ffi.Int)>(symbol: 'OrtSessionOptionsAppendExecutionProvider_Dnnl')
external OrtStatusPtr OrtSessionOptionsAppendExecutionProvider_Dnnl(
  ffi.Pointer<OrtSessionOptions> options,
  int use_arena,
);

@ffi.Native<OrtStatusPtr Function(ffi.Pointer<OrtSessionOptions>, ffi.Uint32)>(symbol: 'OrtSessionOptionsAppendExecutionProvider_CoreML')
external OrtStatusPtr OrtSessionOptionsAppendExecutionProvider_CoreML(
  ffi.Pointer<OrtSessionOptions> options,
  int coreml_flags,
);

@ffi.Native<OrtStatusPtr Function(ffi.Pointer<OrtSessionOptions>, ffi.Int)>(symbol: 'OrtSessionOptionsAppendExecutionProvider_CPU')
external OrtStatusPtr OrtSessionOptionsAppendExecutionProvider_CPU(
  ffi.Pointer<OrtSessionOptions> options,
  int use_arena,
);

final class __mbstate_t extends ffi.Union {
  @ffi.Array.multi([128])
  external ffi.Array<ffi.Char> __mbstate8;

  @ffi.LongLong()
  external int _mbstateL;
}

final class __darwin_pthread_handler_rec extends ffi.Struct {
  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>> __routine;

  external ffi.Pointer<ffi.Void> __arg;

  external ffi.Pointer<__darwin_pthread_handler_rec> __next;
}

final class _opaque_pthread_attr_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([56])
  external ffi.Array<ffi.Char> __opaque;
}

final class _opaque_pthread_cond_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([40])
  external ffi.Array<ffi.Char> __opaque;
}

final class _opaque_pthread_condattr_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([8])
  external ffi.Array<ffi.Char> __opaque;
}

final class _opaque_pthread_mutex_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([56])
  external ffi.Array<ffi.Char> __opaque;
}

final class _opaque_pthread_mutexattr_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([8])
  external ffi.Array<ffi.Char> __opaque;
}

final class _opaque_pthread_once_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([8])
  external ffi.Array<ffi.Char> __opaque;
}

final class _opaque_pthread_rwlock_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([192])
  external ffi.Array<ffi.Char> __opaque;
}

final class _opaque_pthread_rwlockattr_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([16])
  external ffi.Array<ffi.Char> __opaque;
}

final class _opaque_pthread_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  external ffi.Pointer<__darwin_pthread_handler_rec> __cleanup_stack;

  @ffi.Array.multi([8176])
  external ffi.Array<ffi.Char> __opaque;
}

abstract class idtype_t {
  static const int P_ALL = 0;
  static const int P_PID = 1;
  static const int P_PGID = 2;
}

final class __darwin_arm_exception_state extends ffi.Struct {
  @__uint32_t()
  external int __exception;

  @__uint32_t()
  external int __fsr;

  @__uint32_t()
  external int __far;
}

typedef __uint32_t = ffi.UnsignedInt;

final class __darwin_arm_exception_state64 extends ffi.Struct {
  @__uint64_t()
  external int __far;

  @__uint32_t()
  external int __esr;

  @__uint32_t()
  external int __exception;
}

typedef __uint64_t = ffi.UnsignedLongLong;

final class __darwin_arm_thread_state extends ffi.Struct {
  @ffi.Array.multi([13])
  external ffi.Array<__uint32_t> __r;

  @__uint32_t()
  external int __sp;

  @__uint32_t()
  external int __lr;

  @__uint32_t()
  external int __pc;

  @__uint32_t()
  external int __cpsr;
}

final class __darwin_arm_thread_state64 extends ffi.Struct {
  @ffi.Array.multi([29])
  external ffi.Array<__uint64_t> __x;

  @__uint64_t()
  external int __fp;

  @__uint64_t()
  external int __lr;

  @__uint64_t()
  external int __sp;

  @__uint64_t()
  external int __pc;

  @__uint32_t()
  external int __cpsr;

  @__uint32_t()
  external int __pad;
}

final class __darwin_arm_vfp_state extends ffi.Struct {
  @ffi.Array.multi([64])
  external ffi.Array<__uint32_t> __r;

  @__uint32_t()
  external int __fpscr;
}

final class __darwin_arm_neon_state64 extends ffi.Opaque {}

final class __darwin_arm_neon_state extends ffi.Opaque {}

final class __arm_pagein_state extends ffi.Struct {
  @ffi.Int()
  external int __pagein_error;
}

final class __arm_legacy_debug_state extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<__uint32_t> __bvr;

  @ffi.Array.multi([16])
  external ffi.Array<__uint32_t> __bcr;

  @ffi.Array.multi([16])
  external ffi.Array<__uint32_t> __wvr;

  @ffi.Array.multi([16])
  external ffi.Array<__uint32_t> __wcr;
}

final class __darwin_arm_debug_state32 extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<__uint32_t> __bvr;

  @ffi.Array.multi([16])
  external ffi.Array<__uint32_t> __bcr;

  @ffi.Array.multi([16])
  external ffi.Array<__uint32_t> __wvr;

  @ffi.Array.multi([16])
  external ffi.Array<__uint32_t> __wcr;

  @__uint64_t()
  external int __mdscr_el1;
}

final class __darwin_arm_debug_state64 extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<__uint64_t> __bvr;

  @ffi.Array.multi([16])
  external ffi.Array<__uint64_t> __bcr;

  @ffi.Array.multi([16])
  external ffi.Array<__uint64_t> __wvr;

  @ffi.Array.multi([16])
  external ffi.Array<__uint64_t> __wcr;

  @__uint64_t()
  external int __mdscr_el1;
}

final class __darwin_arm_cpmu_state64 extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<__uint64_t> __ctrs;
}

final class __darwin_mcontext32 extends ffi.Struct {
  external __darwin_arm_exception_state __es;

  external __darwin_arm_thread_state __ss;

  external __darwin_arm_vfp_state __fs;
}

final class __darwin_mcontext64 extends ffi.Opaque {}

final class __darwin_sigaltstack extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ss_sp;

  @__darwin_size_t()
  external int ss_size;

  @ffi.Int()
  external int ss_flags;
}

typedef __darwin_size_t = ffi.UnsignedLong;

final class __darwin_ucontext extends ffi.Struct {
  @ffi.Int()
  external int uc_onstack;

  @__darwin_sigset_t()
  external int uc_sigmask;

  external __darwin_sigaltstack uc_stack;

  external ffi.Pointer<__darwin_ucontext> uc_link;

  @__darwin_size_t()
  external int uc_mcsize;

  external ffi.Pointer<__darwin_mcontext64> uc_mcontext;
}

typedef __darwin_sigset_t = __uint32_t;

final class sigval extends ffi.Union {
  @ffi.Int()
  external int sival_int;

  external ffi.Pointer<ffi.Void> sival_ptr;
}

final class sigevent extends ffi.Struct {
  @ffi.Int()
  external int sigev_notify;

  @ffi.Int()
  external int sigev_signo;

  external sigval sigev_value;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function(sigval)>> sigev_notify_function;

  external ffi.Pointer<pthread_attr_t> sigev_notify_attributes;
}

typedef pthread_attr_t = __darwin_pthread_attr_t;
typedef __darwin_pthread_attr_t = _opaque_pthread_attr_t;

final class __siginfo extends ffi.Struct {
  @ffi.Int()
  external int si_signo;

  @ffi.Int()
  external int si_errno;

  @ffi.Int()
  external int si_code;

  @pid_t()
  external int si_pid;

  @uid_t()
  external int si_uid;

  @ffi.Int()
  external int si_status;

  external ffi.Pointer<ffi.Void> si_addr;

  external sigval si_value;

  @ffi.Long()
  external int si_band;

  @ffi.Array.multi([7])
  external ffi.Array<ffi.UnsignedLong> __pad;
}

typedef pid_t = __darwin_pid_t;
typedef __darwin_pid_t = __int32_t;
typedef __int32_t = ffi.Int;
typedef uid_t = __darwin_uid_t;
typedef __darwin_uid_t = __uint32_t;

final class __sigaction_u extends ffi.Union {
  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Int)>> __sa_handler;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Int, ffi.Pointer<__siginfo>, ffi.Pointer<ffi.Void>)>> __sa_sigaction;
}

final class __sigaction extends ffi.Struct {
  external __sigaction_u __sigaction_u1;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int, ffi.Pointer<siginfo_t>, ffi.Pointer<ffi.Void>)>> sa_tramp;

  @sigset_t()
  external int sa_mask;

  @ffi.Int()
  external int sa_flags;
}

typedef siginfo_t = __siginfo;
typedef sigset_t = __darwin_sigset_t;

final class sigaction extends ffi.Struct {
  external __sigaction_u __sigaction_u1;

  @sigset_t()
  external int sa_mask;

  @ffi.Int()
  external int sa_flags;
}

final class sigvec extends ffi.Struct {
  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Int)>> sv_handler;

  @ffi.Int()
  external int sv_mask;

  @ffi.Int()
  external int sv_flags;
}

final class sigstack extends ffi.Struct {
  external ffi.Pointer<ffi.Char> ss_sp;

  @ffi.Int()
  external int ss_onstack;
}

final class timeval extends ffi.Struct {
  @__darwin_time_t()
  external int tv_sec;

  @__darwin_suseconds_t()
  external int tv_usec;
}

typedef __darwin_time_t = ffi.Long;
typedef __darwin_suseconds_t = __int32_t;

final class rusage extends ffi.Struct {
  external timeval ru_utime;

  external timeval ru_stime;

  @ffi.Long()
  external int ru_maxrss;

  @ffi.Long()
  external int ru_ixrss;

  @ffi.Long()
  external int ru_idrss;

  @ffi.Long()
  external int ru_isrss;

  @ffi.Long()
  external int ru_minflt;

  @ffi.Long()
  external int ru_majflt;

  @ffi.Long()
  external int ru_nswap;

  @ffi.Long()
  external int ru_inblock;

  @ffi.Long()
  external int ru_oublock;

  @ffi.Long()
  external int ru_msgsnd;

  @ffi.Long()
  external int ru_msgrcv;

  @ffi.Long()
  external int ru_nsignals;

  @ffi.Long()
  external int ru_nvcsw;

  @ffi.Long()
  external int ru_nivcsw;
}

final class rusage_info_v0 extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<ffi.Uint8> ri_uuid;

  @ffi.Uint64()
  external int ri_user_time;

  @ffi.Uint64()
  external int ri_system_time;

  @ffi.Uint64()
  external int ri_pkg_idle_wkups;

  @ffi.Uint64()
  external int ri_interrupt_wkups;

  @ffi.Uint64()
  external int ri_pageins;

  @ffi.Uint64()
  external int ri_wired_size;

  @ffi.Uint64()
  external int ri_resident_size;

  @ffi.Uint64()
  external int ri_phys_footprint;

  @ffi.Uint64()
  external int ri_proc_start_abstime;

  @ffi.Uint64()
  external int ri_proc_exit_abstime;
}

final class rusage_info_v1 extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<ffi.Uint8> ri_uuid;

  @ffi.Uint64()
  external int ri_user_time;

  @ffi.Uint64()
  external int ri_system_time;

  @ffi.Uint64()
  external int ri_pkg_idle_wkups;

  @ffi.Uint64()
  external int ri_interrupt_wkups;

  @ffi.Uint64()
  external int ri_pageins;

  @ffi.Uint64()
  external int ri_wired_size;

  @ffi.Uint64()
  external int ri_resident_size;

  @ffi.Uint64()
  external int ri_phys_footprint;

  @ffi.Uint64()
  external int ri_proc_start_abstime;

  @ffi.Uint64()
  external int ri_proc_exit_abstime;

  @ffi.Uint64()
  external int ri_child_user_time;

  @ffi.Uint64()
  external int ri_child_system_time;

  @ffi.Uint64()
  external int ri_child_pkg_idle_wkups;

  @ffi.Uint64()
  external int ri_child_interrupt_wkups;

  @ffi.Uint64()
  external int ri_child_pageins;

  @ffi.Uint64()
  external int ri_child_elapsed_abstime;
}

final class rusage_info_v2 extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<ffi.Uint8> ri_uuid;

  @ffi.Uint64()
  external int ri_user_time;

  @ffi.Uint64()
  external int ri_system_time;

  @ffi.Uint64()
  external int ri_pkg_idle_wkups;

  @ffi.Uint64()
  external int ri_interrupt_wkups;

  @ffi.Uint64()
  external int ri_pageins;

  @ffi.Uint64()
  external int ri_wired_size;

  @ffi.Uint64()
  external int ri_resident_size;

  @ffi.Uint64()
  external int ri_phys_footprint;

  @ffi.Uint64()
  external int ri_proc_start_abstime;

  @ffi.Uint64()
  external int ri_proc_exit_abstime;

  @ffi.Uint64()
  external int ri_child_user_time;

  @ffi.Uint64()
  external int ri_child_system_time;

  @ffi.Uint64()
  external int ri_child_pkg_idle_wkups;

  @ffi.Uint64()
  external int ri_child_interrupt_wkups;

  @ffi.Uint64()
  external int ri_child_pageins;

  @ffi.Uint64()
  external int ri_child_elapsed_abstime;

  @ffi.Uint64()
  external int ri_diskio_bytesread;

  @ffi.Uint64()
  external int ri_diskio_byteswritten;
}

final class rusage_info_v3 extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<ffi.Uint8> ri_uuid;

  @ffi.Uint64()
  external int ri_user_time;

  @ffi.Uint64()
  external int ri_system_time;

  @ffi.Uint64()
  external int ri_pkg_idle_wkups;

  @ffi.Uint64()
  external int ri_interrupt_wkups;

  @ffi.Uint64()
  external int ri_pageins;

  @ffi.Uint64()
  external int ri_wired_size;

  @ffi.Uint64()
  external int ri_resident_size;

  @ffi.Uint64()
  external int ri_phys_footprint;

  @ffi.Uint64()
  external int ri_proc_start_abstime;

  @ffi.Uint64()
  external int ri_proc_exit_abstime;

  @ffi.Uint64()
  external int ri_child_user_time;

  @ffi.Uint64()
  external int ri_child_system_time;

  @ffi.Uint64()
  external int ri_child_pkg_idle_wkups;

  @ffi.Uint64()
  external int ri_child_interrupt_wkups;

  @ffi.Uint64()
  external int ri_child_pageins;

  @ffi.Uint64()
  external int ri_child_elapsed_abstime;

  @ffi.Uint64()
  external int ri_diskio_bytesread;

  @ffi.Uint64()
  external int ri_diskio_byteswritten;

  @ffi.Uint64()
  external int ri_cpu_time_qos_default;

  @ffi.Uint64()
  external int ri_cpu_time_qos_maintenance;

  @ffi.Uint64()
  external int ri_cpu_time_qos_background;

  @ffi.Uint64()
  external int ri_cpu_time_qos_utility;

  @ffi.Uint64()
  external int ri_cpu_time_qos_legacy;

  @ffi.Uint64()
  external int ri_cpu_time_qos_user_initiated;

  @ffi.Uint64()
  external int ri_cpu_time_qos_user_interactive;

  @ffi.Uint64()
  external int ri_billed_system_time;

  @ffi.Uint64()
  external int ri_serviced_system_time;
}

final class rusage_info_v4 extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<ffi.Uint8> ri_uuid;

  @ffi.Uint64()
  external int ri_user_time;

  @ffi.Uint64()
  external int ri_system_time;

  @ffi.Uint64()
  external int ri_pkg_idle_wkups;

  @ffi.Uint64()
  external int ri_interrupt_wkups;

  @ffi.Uint64()
  external int ri_pageins;

  @ffi.Uint64()
  external int ri_wired_size;

  @ffi.Uint64()
  external int ri_resident_size;

  @ffi.Uint64()
  external int ri_phys_footprint;

  @ffi.Uint64()
  external int ri_proc_start_abstime;

  @ffi.Uint64()
  external int ri_proc_exit_abstime;

  @ffi.Uint64()
  external int ri_child_user_time;

  @ffi.Uint64()
  external int ri_child_system_time;

  @ffi.Uint64()
  external int ri_child_pkg_idle_wkups;

  @ffi.Uint64()
  external int ri_child_interrupt_wkups;

  @ffi.Uint64()
  external int ri_child_pageins;

  @ffi.Uint64()
  external int ri_child_elapsed_abstime;

  @ffi.Uint64()
  external int ri_diskio_bytesread;

  @ffi.Uint64()
  external int ri_diskio_byteswritten;

  @ffi.Uint64()
  external int ri_cpu_time_qos_default;

  @ffi.Uint64()
  external int ri_cpu_time_qos_maintenance;

  @ffi.Uint64()
  external int ri_cpu_time_qos_background;

  @ffi.Uint64()
  external int ri_cpu_time_qos_utility;

  @ffi.Uint64()
  external int ri_cpu_time_qos_legacy;

  @ffi.Uint64()
  external int ri_cpu_time_qos_user_initiated;

  @ffi.Uint64()
  external int ri_cpu_time_qos_user_interactive;

  @ffi.Uint64()
  external int ri_billed_system_time;

  @ffi.Uint64()
  external int ri_serviced_system_time;

  @ffi.Uint64()
  external int ri_logical_writes;

  @ffi.Uint64()
  external int ri_lifetime_max_phys_footprint;

  @ffi.Uint64()
  external int ri_instructions;

  @ffi.Uint64()
  external int ri_cycles;

  @ffi.Uint64()
  external int ri_billed_energy;

  @ffi.Uint64()
  external int ri_serviced_energy;

  @ffi.Uint64()
  external int ri_interval_max_phys_footprint;

  @ffi.Uint64()
  external int ri_runnable_time;
}

final class rusage_info_v5 extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<ffi.Uint8> ri_uuid;

  @ffi.Uint64()
  external int ri_user_time;

  @ffi.Uint64()
  external int ri_system_time;

  @ffi.Uint64()
  external int ri_pkg_idle_wkups;

  @ffi.Uint64()
  external int ri_interrupt_wkups;

  @ffi.Uint64()
  external int ri_pageins;

  @ffi.Uint64()
  external int ri_wired_size;

  @ffi.Uint64()
  external int ri_resident_size;

  @ffi.Uint64()
  external int ri_phys_footprint;

  @ffi.Uint64()
  external int ri_proc_start_abstime;

  @ffi.Uint64()
  external int ri_proc_exit_abstime;

  @ffi.Uint64()
  external int ri_child_user_time;

  @ffi.Uint64()
  external int ri_child_system_time;

  @ffi.Uint64()
  external int ri_child_pkg_idle_wkups;

  @ffi.Uint64()
  external int ri_child_interrupt_wkups;

  @ffi.Uint64()
  external int ri_child_pageins;

  @ffi.Uint64()
  external int ri_child_elapsed_abstime;

  @ffi.Uint64()
  external int ri_diskio_bytesread;

  @ffi.Uint64()
  external int ri_diskio_byteswritten;

  @ffi.Uint64()
  external int ri_cpu_time_qos_default;

  @ffi.Uint64()
  external int ri_cpu_time_qos_maintenance;

  @ffi.Uint64()
  external int ri_cpu_time_qos_background;

  @ffi.Uint64()
  external int ri_cpu_time_qos_utility;

  @ffi.Uint64()
  external int ri_cpu_time_qos_legacy;

  @ffi.Uint64()
  external int ri_cpu_time_qos_user_initiated;

  @ffi.Uint64()
  external int ri_cpu_time_qos_user_interactive;

  @ffi.Uint64()
  external int ri_billed_system_time;

  @ffi.Uint64()
  external int ri_serviced_system_time;

  @ffi.Uint64()
  external int ri_logical_writes;

  @ffi.Uint64()
  external int ri_lifetime_max_phys_footprint;

  @ffi.Uint64()
  external int ri_instructions;

  @ffi.Uint64()
  external int ri_cycles;

  @ffi.Uint64()
  external int ri_billed_energy;

  @ffi.Uint64()
  external int ri_serviced_energy;

  @ffi.Uint64()
  external int ri_interval_max_phys_footprint;

  @ffi.Uint64()
  external int ri_runnable_time;

  @ffi.Uint64()
  external int ri_flags;
}

final class rusage_info_v6 extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<ffi.Uint8> ri_uuid;

  @ffi.Uint64()
  external int ri_user_time;

  @ffi.Uint64()
  external int ri_system_time;

  @ffi.Uint64()
  external int ri_pkg_idle_wkups;

  @ffi.Uint64()
  external int ri_interrupt_wkups;

  @ffi.Uint64()
  external int ri_pageins;

  @ffi.Uint64()
  external int ri_wired_size;

  @ffi.Uint64()
  external int ri_resident_size;

  @ffi.Uint64()
  external int ri_phys_footprint;

  @ffi.Uint64()
  external int ri_proc_start_abstime;

  @ffi.Uint64()
  external int ri_proc_exit_abstime;

  @ffi.Uint64()
  external int ri_child_user_time;

  @ffi.Uint64()
  external int ri_child_system_time;

  @ffi.Uint64()
  external int ri_child_pkg_idle_wkups;

  @ffi.Uint64()
  external int ri_child_interrupt_wkups;

  @ffi.Uint64()
  external int ri_child_pageins;

  @ffi.Uint64()
  external int ri_child_elapsed_abstime;

  @ffi.Uint64()
  external int ri_diskio_bytesread;

  @ffi.Uint64()
  external int ri_diskio_byteswritten;

  @ffi.Uint64()
  external int ri_cpu_time_qos_default;

  @ffi.Uint64()
  external int ri_cpu_time_qos_maintenance;

  @ffi.Uint64()
  external int ri_cpu_time_qos_background;

  @ffi.Uint64()
  external int ri_cpu_time_qos_utility;

  @ffi.Uint64()
  external int ri_cpu_time_qos_legacy;

  @ffi.Uint64()
  external int ri_cpu_time_qos_user_initiated;

  @ffi.Uint64()
  external int ri_cpu_time_qos_user_interactive;

  @ffi.Uint64()
  external int ri_billed_system_time;

  @ffi.Uint64()
  external int ri_serviced_system_time;

  @ffi.Uint64()
  external int ri_logical_writes;

  @ffi.Uint64()
  external int ri_lifetime_max_phys_footprint;

  @ffi.Uint64()
  external int ri_instructions;

  @ffi.Uint64()
  external int ri_cycles;

  @ffi.Uint64()
  external int ri_billed_energy;

  @ffi.Uint64()
  external int ri_serviced_energy;

  @ffi.Uint64()
  external int ri_interval_max_phys_footprint;

  @ffi.Uint64()
  external int ri_runnable_time;

  @ffi.Uint64()
  external int ri_flags;

  @ffi.Uint64()
  external int ri_user_ptime;

  @ffi.Uint64()
  external int ri_system_ptime;

  @ffi.Uint64()
  external int ri_pinstructions;

  @ffi.Uint64()
  external int ri_pcycles;

  @ffi.Uint64()
  external int ri_energy_nj;

  @ffi.Uint64()
  external int ri_penergy_nj;

  @ffi.Array.multi([14])
  external ffi.Array<ffi.Uint64> ri_reserved;
}

final class rlimit extends ffi.Struct {
  @rlim_t()
  external int rlim_cur;

  @rlim_t()
  external int rlim_max;
}

typedef rlim_t = __uint64_t;

final class proc_rlimit_control_wakeupmon extends ffi.Struct {
  @ffi.Uint32()
  external int wm_flags;

  @ffi.Int32()
  external int wm_rate;
}

typedef id_t = __darwin_id_t;
typedef __darwin_id_t = __uint32_t;

@ffi.Packed(1)
final class _OSUnalignedU16 extends ffi.Struct {
  @ffi.Uint16()
  external int __val;
}

@ffi.Packed(1)
final class _OSUnalignedU32 extends ffi.Struct {
  @ffi.Uint32()
  external int __val;
}

@ffi.Packed(1)
final class _OSUnalignedU64 extends ffi.Struct {
  @ffi.Uint64()
  external int __val;
}

final class wait extends ffi.Opaque {}

final class div_t extends ffi.Struct {
  @ffi.Int()
  external int quot;

  @ffi.Int()
  external int rem;
}

final class ldiv_t extends ffi.Struct {
  @ffi.Long()
  external int quot;

  @ffi.Long()
  external int rem;
}

final class lldiv_t extends ffi.Struct {
  @ffi.LongLong()
  external int quot;

  @ffi.LongLong()
  external int rem;
}

typedef dev_t = __darwin_dev_t;
typedef __darwin_dev_t = __int32_t;
typedef mode_t = __darwin_mode_t;
typedef __darwin_mode_t = __uint16_t;
typedef __uint16_t = ffi.UnsignedShort;
typedef errno_t = ffi.Int;
typedef rsize_t = __darwin_size_t;
typedef ssize_t = __darwin_ssize_t;
typedef __darwin_ssize_t = ffi.Long;

/// Copied from TensorProto::DataType
/// Currently, Ort doesn't support complex64, complex128
abstract class ONNXTensorElementDataType {
  static const int ONNX_TENSOR_ELEMENT_DATA_TYPE_UNDEFINED = 0;
  static const int ONNX_TENSOR_ELEMENT_DATA_TYPE_FLOAT = 1;
  static const int ONNX_TENSOR_ELEMENT_DATA_TYPE_UINT8 = 2;
  static const int ONNX_TENSOR_ELEMENT_DATA_TYPE_INT8 = 3;
  static const int ONNX_TENSOR_ELEMENT_DATA_TYPE_UINT16 = 4;
  static const int ONNX_TENSOR_ELEMENT_DATA_TYPE_INT16 = 5;
  static const int ONNX_TENSOR_ELEMENT_DATA_TYPE_INT32 = 6;
  static const int ONNX_TENSOR_ELEMENT_DATA_TYPE_INT64 = 7;
  static const int ONNX_TENSOR_ELEMENT_DATA_TYPE_STRING = 8;
  static const int ONNX_TENSOR_ELEMENT_DATA_TYPE_BOOL = 9;
  static const int ONNX_TENSOR_ELEMENT_DATA_TYPE_FLOAT16 = 10;
  static const int ONNX_TENSOR_ELEMENT_DATA_TYPE_DOUBLE = 11;
  static const int ONNX_TENSOR_ELEMENT_DATA_TYPE_UINT32 = 12;
  static const int ONNX_TENSOR_ELEMENT_DATA_TYPE_UINT64 = 13;
  static const int ONNX_TENSOR_ELEMENT_DATA_TYPE_COMPLEX64 = 14;
  static const int ONNX_TENSOR_ELEMENT_DATA_TYPE_COMPLEX128 = 15;
  static const int ONNX_TENSOR_ELEMENT_DATA_TYPE_BFLOAT16 = 16;
  static const int ONNX_TENSOR_ELEMENT_DATA_TYPE_FLOAT8E4M3FN = 17;
  static const int ONNX_TENSOR_ELEMENT_DATA_TYPE_FLOAT8E4M3FNUZ = 18;
  static const int ONNX_TENSOR_ELEMENT_DATA_TYPE_FLOAT8E5M2 = 19;
  static const int ONNX_TENSOR_ELEMENT_DATA_TYPE_FLOAT8E5M2FNUZ = 20;
}

abstract class ONNXType {
  static const int ONNX_TYPE_UNKNOWN = 0;
  static const int ONNX_TYPE_TENSOR = 1;
  static const int ONNX_TYPE_SEQUENCE = 2;
  static const int ONNX_TYPE_MAP = 3;
  static const int ONNX_TYPE_OPAQUE = 4;
  static const int ONNX_TYPE_SPARSETENSOR = 5;
  static const int ONNX_TYPE_OPTIONAL = 6;
}

abstract class OrtSparseFormat {
  static const int ORT_SPARSE_UNDEFINED = 0;
  static const int ORT_SPARSE_COO = 1;
  static const int ORT_SPARSE_CSRC = 2;
  static const int ORT_SPARSE_BLOCK_SPARSE = 4;
}

abstract class OrtSparseIndicesFormat {
  static const int ORT_SPARSE_COO_INDICES = 0;
  static const int ORT_SPARSE_CSR_INNER_INDICES = 1;
  static const int ORT_SPARSE_CSR_OUTER_INDICES = 2;
  static const int ORT_SPARSE_BLOCK_SPARSE_INDICES = 3;
}

/// \brief Logging severity levels
///
/// In typical API usage, specifying a logging severity level specifies the minimum severity of log messages to show.
abstract class OrtLoggingLevel {
  /// < Verbose informational messages (least severe).
  static const int ORT_LOGGING_LEVEL_VERBOSE = 0;

  /// < Informational messages.
  static const int ORT_LOGGING_LEVEL_INFO = 1;

  /// < Warning messages.
  static const int ORT_LOGGING_LEVEL_WARNING = 2;

  /// < Error messages.
  static const int ORT_LOGGING_LEVEL_ERROR = 3;

  /// < Fatal error messages (most severe).
  static const int ORT_LOGGING_LEVEL_FATAL = 4;
}

abstract class OrtErrorCode {
  static const int ORT_OK = 0;
  static const int ORT_FAIL = 1;
  static const int ORT_INVALID_ARGUMENT = 2;
  static const int ORT_NO_SUCHFILE = 3;
  static const int ORT_NO_MODEL = 4;
  static const int ORT_ENGINE_ERROR = 5;
  static const int ORT_RUNTIME_EXCEPTION = 6;
  static const int ORT_INVALID_PROTOBUF = 7;
  static const int ORT_MODEL_LOADED = 8;
  static const int ORT_NOT_IMPLEMENTED = 9;
  static const int ORT_INVALID_GRAPH = 10;
  static const int ORT_EP_FAIL = 11;
}

abstract class OrtOpAttrType {
  static const int ORT_OP_ATTR_UNDEFINED = 0;
  static const int ORT_OP_ATTR_INT = 1;
  static const int ORT_OP_ATTR_INTS = 2;
  static const int ORT_OP_ATTR_FLOAT = 3;
  static const int ORT_OP_ATTR_FLOATS = 4;
  static const int ORT_OP_ATTR_STRING = 5;
  static const int ORT_OP_ATTR_STRINGS = 6;
}

final class OrtEnv extends ffi.Opaque {}

final class OrtStatus extends ffi.Opaque {}

final class OrtMemoryInfo extends ffi.Opaque {}

final class OrtIoBinding extends ffi.Opaque {}

final class OrtSession extends ffi.Opaque {}

final class OrtValue extends ffi.Opaque {}

final class OrtRunOptions extends ffi.Opaque {}

final class OrtTypeInfo extends ffi.Opaque {}

final class OrtTensorTypeAndShapeInfo extends ffi.Opaque {}

final class OrtMapTypeInfo extends ffi.Opaque {}

final class OrtSequenceTypeInfo extends ffi.Opaque {}

final class OrtOptionalTypeInfo extends ffi.Opaque {}

final class OrtSessionOptions extends ffi.Opaque {}

final class OrtCustomOpDomain extends ffi.Opaque {}

final class OrtModelMetadata extends ffi.Opaque {}

final class OrtThreadPoolParams extends ffi.Opaque {}

final class OrtThreadingOptions extends ffi.Opaque {}

final class OrtArenaCfg extends ffi.Opaque {}

final class OrtPrepackedWeightsContainer extends ffi.Opaque {}

final class OrtTensorRTProviderOptionsV2 extends ffi.Opaque {}

final class OrtCUDAProviderOptionsV2 extends ffi.Opaque {}

final class OrtCANNProviderOptions extends ffi.Opaque {}

final class OrtDnnlProviderOptions extends ffi.Opaque {}

final class OrtOp extends ffi.Opaque {}

final class OrtOpAttr extends ffi.Opaque {}

final class OrtLogger extends ffi.Opaque {}

/// \brief Memory allocation interface
///
/// Structure of function pointers that defines a memory allocator. This can be created and filled in by the user for custom allocators.
///
/// When an allocator is passed to any function, be sure that the allocator object is not destroyed until the last allocated object using it is freed.
final class OrtAllocator extends ffi.Struct {
  /// < Must be initialized to ORT_API_VERSION
  @ffi.Uint32()
  external int version;

  /// < Returns a pointer to an allocated block of `size` bytes
  external ffi.Pointer<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<OrtAllocator> this_, ffi.Size size)>> Alloc;

  /// < Free a block of memory previously allocated with OrtAllocator::Alloc
  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<OrtAllocator> this_, ffi.Pointer<ffi.Void> p)>> Free;

  /// < Return a pointer to an ::OrtMemoryInfo that describes this allocator
  external ffi.Pointer<ffi.NativeFunction<ffi.Pointer<OrtMemoryInfo> Function(ffi.Pointer<OrtAllocator> this_)>> Info;
}

/// \brief Graph optimization level
///
/// Refer to https://www.onnxruntime.ai/docs/performance/graph-optimizations.html#graph-optimization-levels
/// for an in-depth understanding of the Graph Optimization Levels.
abstract class GraphOptimizationLevel {
  static const int ORT_DISABLE_ALL = 0;
  static const int ORT_ENABLE_BASIC = 1;
  static const int ORT_ENABLE_EXTENDED = 2;
  static const int ORT_ENABLE_ALL = 99;
}

abstract class ExecutionMode {
  static const int ORT_SEQUENTIAL = 0;
  static const int ORT_PARALLEL = 1;
}

/// \brief Language projection identifiers
/// /see OrtApi::SetLanguageProjection
abstract class OrtLanguageProjection {
  static const int ORT_PROJECTION_C = 0;
  static const int ORT_PROJECTION_CPLUSPLUS = 1;
  static const int ORT_PROJECTION_CSHARP = 2;
  static const int ORT_PROJECTION_PYTHON = 3;
  static const int ORT_PROJECTION_JAVA = 4;
  static const int ORT_PROJECTION_WINML = 5;
  static const int ORT_PROJECTION_NODEJS = 6;
}

final class OrtKernelInfo extends ffi.Opaque {}

final class OrtKernelContext extends ffi.Opaque {}

final class OrtCustomOp extends ffi.Struct {
  @ffi.Uint32()
  external int version;

  external ffi.Pointer<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<OrtCustomOp> op, ffi.Pointer<OrtApi> api, ffi.Pointer<OrtKernelInfo> info)>> CreateKernel;

  external ffi.Pointer<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<OrtCustomOp> op)>> GetName;

  external ffi.Pointer<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<OrtCustomOp> op)>> GetExecutionProviderType;

  external ffi.Pointer<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<OrtCustomOp> op, ffi.Size index)>> GetInputType;

  external ffi.Pointer<ffi.NativeFunction<ffi.Size Function(ffi.Pointer<OrtCustomOp> op)>> GetInputTypeCount;

  external ffi.Pointer<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<OrtCustomOp> op, ffi.Size index)>> GetOutputType;

  external ffi.Pointer<ffi.NativeFunction<ffi.Size Function(ffi.Pointer<OrtCustomOp> op)>> GetOutputTypeCount;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void> op_kernel, ffi.Pointer<OrtKernelContext> context)>> KernelCompute;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void> op_kernel)>> KernelDestroy;

  external ffi.Pointer<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<OrtCustomOp> op, ffi.Size index)>> GetInputCharacteristic;

  external ffi.Pointer<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<OrtCustomOp> op, ffi.Size index)>> GetOutputCharacteristic;

  external ffi.Pointer<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<OrtCustomOp> op, ffi.Size index)>> GetInputMemoryType;

  external ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<OrtCustomOp> op)>> GetVariadicInputMinArity;

  external ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<OrtCustomOp> op)>> GetVariadicInputHomogeneity;

  external ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<OrtCustomOp> op)>> GetVariadicOutputMinArity;

  external ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<OrtCustomOp> op)>> GetVariadicOutputHomogeneity;

  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Pointer<OrtCustomOp> op, ffi.Pointer<OrtApi> api, ffi.Pointer<OrtKernelInfo> info, ffi.Pointer<ffi.Pointer<ffi.Void>> kernel)>> CreateKernelV2;

  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Pointer<ffi.Void> op_kernel, ffi.Pointer<OrtKernelContext> context)>> KernelComputeV2;
}

/// \brief The C API
///
/// All C API functions are defined inside this structure as pointers to functions.
/// Call OrtApiBase::GetApi to get a pointer to it
///
/// \nosubgrouping
final class OrtApi extends ffi.Struct {
  /// \brief Create an OrtStatus from a null terminated string
  ///
  /// \param[in] code
  /// \param[in] msg A null-terminated string. Its contents will be copied.
  /// \return A new OrtStatus object, must be destroyed with OrtApi::ReleaseStatus
  external ffi.Pointer<ffi.NativeFunction<ffi.Pointer<OrtStatus> Function(ffi.Int32 code, ffi.Pointer<ffi.Char> msg)>> CreateStatus;

  /// \brief Get OrtErrorCode from OrtStatus
  ///
  /// \param[in] status
  /// \return OrtErrorCode that \p status was created with
  external ffi.Pointer<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<OrtStatus> status)>> GetErrorCode;

  /// \brief Get error string from OrtStatus
  ///
  /// \param[in] status
  /// \return The error message inside the `status`. Do not free the returned value.
  external ffi.Pointer<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<OrtStatus> status)>> GetErrorMessage;

  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Int32 log_severity_level, ffi.Pointer<ffi.Char> logid, ffi.Pointer<ffi.Pointer<OrtEnv>> out)>> CreateEnv;

  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(OrtLoggingFunction logging_function, ffi.Pointer<ffi.Void> logger_param, ffi.Int32 log_severity_level, ffi.Pointer<ffi.Char> logid, ffi.Pointer<ffi.Pointer<OrtEnv>> out)>> CreateEnvWithCustomLogger;

  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Pointer<OrtEnv> env)>> EnableTelemetryEvents;

  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Pointer<OrtEnv> env)>> DisableTelemetryEvents;

  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Pointer<OrtEnv> env, ffi.Pointer<ffi.Char> model_path, ffi.Pointer<OrtSessionOptions> options, ffi.Pointer<ffi.Pointer<OrtSession>> out)>> CreateSession;

  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Pointer<OrtEnv> env, ffi.Pointer<ffi.Void> model_data, ffi.Size model_data_length, ffi.Pointer<OrtSessionOptions> options, ffi.Pointer<ffi.Pointer<OrtSession>> out)>> CreateSessionFromArray;

  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Pointer<OrtSession> session, ffi.Pointer<OrtRunOptions> run_options, ffi.Pointer<ffi.Pointer<ffi.Char>> input_names, ffi.Pointer<ffi.Pointer<OrtValue>> inputs, ffi.Size input_len, ffi.Pointer<ffi.Pointer<ffi.Char>> output_names, ffi.Size output_names_len, ffi.Pointer<ffi.Pointer<OrtValue>> outputs)>> Run;

  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Pointer<ffi.Pointer<OrtSessionOptions>> options)>> CreateSessionOptions;

  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Pointer<OrtSessionOptions> options, ffi.Pointer<ffi.Char> optimized_model_filepath)>> SetOptimizedModelFilePath;

  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Pointer<OrtSessionOptions> in_options, ffi.Pointer<ffi.Pointer<OrtSessionOptions>> out_options)>> CloneSessionOptions;

  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Pointer<OrtSessionOptions> options, ffi.Int32 execution_mode)>> SetSessionExecutionMode;

  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Pointer<OrtSessionOptions> options, ffi.Pointer<ffi.Char> profile_file_prefix)>> EnableProfiling;

  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Pointer<OrtSessionOptions> options)>> DisableProfiling;

  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Pointer<OrtSessionOptions> options)>> EnableMemPattern;

  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Pointer<OrtSessionOptions> options)>> DisableMemPattern;

  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Pointer<OrtSessionOptions> options)>> EnableCpuMemArena;

  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Pointer<OrtSessionOptions> options)>> DisableCpuMemArena;

  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Pointer<OrtSessionOptions> options, ffi.Pointer<ffi.Char> logid)>> SetSessionLogId;

  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Pointer<OrtSessionOptions> options, ffi.Int session_log_verbosity_level)>> SetSessionLogVerbosityLevel;

  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Pointer<OrtSessionOptions> options, ffi.Int session_log_severity_level)>> SetSessionLogSeverityLevel;

  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Pointer<OrtSessionOptions> options, ffi.Int32 graph_optimization_level)>> SetSessionGraphOptimizationLevel;

  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Pointer<OrtSessionOptions> options, ffi.Int intra_op_num_threads)>> SetIntraOpNumThreads;

  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Pointer<OrtSessionOptions> options, ffi.Int inter_op_num_threads)>> SetInterOpNumThreads;

  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Pointer<ffi.Char> domain, ffi.Pointer<ffi.Pointer<OrtCustomOpDomain>> out)>> CreateCustomOpDomain;

  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Pointer<OrtCustomOpDomain> custom_op_domain, ffi.Pointer<OrtCustomOp> op)>> CustomOpDomain_Add;

  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Pointer<OrtSessionOptions> options, ffi.Pointer<OrtCustomOpDomain> custom_op_domain)>> AddCustomOpDomain;

  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Pointer<OrtSessionOptions> options, ffi.Pointer<ffi.Char> library_path, ffi.Pointer<ffi.Pointer<ffi.Void>> library_handle)>> RegisterCustomOpsLibrary;

  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Pointer<OrtSession> session, ffi.Pointer<ffi.Size> out)>> SessionGetInputCount;

  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Pointer<OrtSession> session, ffi.Pointer<ffi.Size> out)>> SessionGetOutputCount;

  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Pointer<OrtSession> session, ffi.Pointer<ffi.Size> out)>> SessionGetOverridableInitializerCount;

  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Pointer<OrtSession> session, ffi.Size index, ffi.Pointer<ffi.Pointer<OrtTypeInfo>> type_info)>> SessionGetInputTypeInfo;

  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Pointer<OrtSession> session, ffi.Size index, ffi.Pointer<ffi.Pointer<OrtTypeInfo>> type_info)>> SessionGetOutputTypeInfo;

  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Pointer<OrtSession> session, ffi.Size index, ffi.Pointer<ffi.Pointer<OrtTypeInfo>> type_info)>> SessionGetOverridableInitializerTypeInfo;

  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Pointer<OrtSession> session, ffi.Size index, ffi.Pointer<OrtAllocator> allocator, ffi.Pointer<ffi.Pointer<ffi.Char>> value)>> SessionGetInputName;

  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Pointer<OrtSession> session, ffi.Size index, ffi.Pointer<OrtAllocator> allocator, ffi.Pointer<ffi.Pointer<ffi.Char>> value)>> SessionGetOutputName;

  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Pointer<OrtSession> session, ffi.Size index, ffi.Pointer<OrtAllocator> allocator, ffi.Pointer<ffi.Pointer<ffi.Char>> value)>> SessionGetOverridableInitializerName;

  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Pointer<ffi.Pointer<OrtRunOptions>> out)>> CreateRunOptions;

  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Pointer<OrtRunOptions> options, ffi.Int log_verbosity_level)>> RunOptionsSetRunLogVerbosityLevel;

  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Pointer<OrtRunOptions> options, ffi.Int log_severity_level)>> RunOptionsSetRunLogSeverityLevel;

  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Pointer<OrtRunOptions> options, ffi.Pointer<ffi.Char> run_tag)>> RunOptionsSetRunTag;

  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Pointer<OrtRunOptions> options, ffi.Pointer<ffi.Int> log_verbosity_level)>> RunOptionsGetRunLogVerbosityLevel;

  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Pointer<OrtRunOptions> options, ffi.Pointer<ffi.Int> log_severity_level)>> RunOptionsGetRunLogSeverityLevel;

  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Pointer<OrtRunOptions> options, ffi.Pointer<ffi.Pointer<ffi.Char>> run_tag)>> RunOptionsGetRunTag;

  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Pointer<OrtRunOptions> options)>> RunOptionsSetTerminate;

  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Pointer<OrtRunOptions> options)>> RunOptionsUnsetTerminate;

  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Pointer<OrtAllocator> allocator, ffi.Pointer<ffi.Int64> shape, ffi.Size shape_len, ffi.Int32 type, ffi.Pointer<ffi.Pointer<OrtValue>> out)>> CreateTensorAsOrtValue;

  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Pointer<OrtMemoryInfo> info, ffi.Pointer<ffi.Void> p_data, ffi.Size p_data_len, ffi.Pointer<ffi.Int64> shape, ffi.Size shape_len, ffi.Int32 type, ffi.Pointer<ffi.Pointer<OrtValue>> out)>> CreateTensorWithDataAsOrtValue;

  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Pointer<OrtValue> value, ffi.Pointer<ffi.Int> out)>> IsTensor;

  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Pointer<OrtValue> value, ffi.Pointer<ffi.Pointer<ffi.Void>> out)>> GetTensorMutableData;

  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Pointer<OrtValue> value, ffi.Pointer<ffi.Pointer<ffi.Char>> s, ffi.Size s_len)>> FillStringTensor;

  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Pointer<OrtValue> value, ffi.Pointer<ffi.Size> len)>> GetStringTensorDataLength;

  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Pointer<OrtValue> value, ffi.Pointer<ffi.Void> s, ffi.Size s_len, ffi.Pointer<ffi.Size> offsets, ffi.Size offsets_len)>> GetStringTensorContent;

  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Pointer<OrtTypeInfo> type_info, ffi.Pointer<ffi.Pointer<OrtTensorTypeAndShapeInfo>> out)>> CastTypeInfoToTensorInfo;

  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Pointer<OrtTypeInfo> type_info, ffi.Pointer<ffi.Int32> out)>> GetOnnxTypeFromTypeInfo;

  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Pointer<ffi.Pointer<OrtTensorTypeAndShapeInfo>> out)>> CreateTensorTypeAndShapeInfo;

  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Pointer<OrtTensorTypeAndShapeInfo> info, ffi.Int32 type)>> SetTensorElementType;

  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Pointer<OrtTensorTypeAndShapeInfo> info, ffi.Pointer<ffi.Int64> dim_values, ffi.Size dim_count)>> SetDimensions;

  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Pointer<OrtTensorTypeAndShapeInfo> info, ffi.Pointer<ffi.Int32> out)>> GetTensorElementType;

  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Pointer<OrtTensorTypeAndShapeInfo> info, ffi.Pointer<ffi.Size> out)>> GetDimensionsCount;

  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Pointer<OrtTensorTypeAndShapeInfo> info, ffi.Pointer<ffi.Int64> dim_values, ffi.Size dim_values_length)>> GetDimensions;

  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Pointer<OrtTensorTypeAndShapeInfo> info, ffi.Pointer<ffi.Pointer<ffi.Char>> dim_params, ffi.Size dim_params_length)>> GetSymbolicDimensions;

  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Pointer<OrtTensorTypeAndShapeInfo> info, ffi.Pointer<ffi.Size> out)>> GetTensorShapeElementCount;

  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Pointer<OrtValue> value, ffi.Pointer<ffi.Pointer<OrtTensorTypeAndShapeInfo>> out)>> GetTensorTypeAndShape;

  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Pointer<OrtValue> value, ffi.Pointer<ffi.Pointer<OrtTypeInfo>> out)>> GetTypeInfo;

  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Pointer<OrtValue> value, ffi.Pointer<ffi.Int32> out)>> GetValueType;

  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Pointer<ffi.Char> name, ffi.Int32 type, ffi.Int id, ffi.Int32 mem_type, ffi.Pointer<ffi.Pointer<OrtMemoryInfo>> out)>> CreateMemoryInfo;

  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Int32 type, ffi.Int32 mem_type, ffi.Pointer<ffi.Pointer<OrtMemoryInfo>> out)>> CreateCpuMemoryInfo;

  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Pointer<OrtMemoryInfo> info1, ffi.Pointer<OrtMemoryInfo> info2, ffi.Pointer<ffi.Int> out)>> CompareMemoryInfo;

  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Pointer<OrtMemoryInfo> ptr, ffi.Pointer<ffi.Pointer<ffi.Char>> out)>> MemoryInfoGetName;

  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Pointer<OrtMemoryInfo> ptr, ffi.Pointer<ffi.Int> out)>> MemoryInfoGetId;

  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Pointer<OrtMemoryInfo> ptr, ffi.Pointer<ffi.Int32> out)>> MemoryInfoGetMemType;

  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Pointer<OrtMemoryInfo> ptr, ffi.Pointer<ffi.Int32> out)>> MemoryInfoGetType;

  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Pointer<OrtAllocator> ort_allocator, ffi.Size size, ffi.Pointer<ffi.Pointer<ffi.Void>> out)>> AllocatorAlloc;

  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Pointer<OrtAllocator> ort_allocator, ffi.Pointer<ffi.Void> p)>> AllocatorFree;

  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Pointer<OrtAllocator> ort_allocator, ffi.Pointer<ffi.Pointer<OrtMemoryInfo>> out)>> AllocatorGetInfo;

  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Pointer<ffi.Pointer<OrtAllocator>> out)>> GetAllocatorWithDefaultOptions;

  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Pointer<OrtSessionOptions> options, ffi.Pointer<ffi.Char> dim_denotation, ffi.Int64 dim_value)>> AddFreeDimensionOverride;

  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Pointer<OrtValue> value, ffi.Int index, ffi.Pointer<OrtAllocator> allocator, ffi.Pointer<ffi.Pointer<OrtValue>> out)>> GetValue;

  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Pointer<OrtValue> value, ffi.Pointer<ffi.Size> out)>> GetValueCount;

  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Pointer<ffi.Pointer<OrtValue>> in1, ffi.Size num_values, ffi.Int32 value_type, ffi.Pointer<ffi.Pointer<OrtValue>> out)>> CreateValue;

  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Pointer<ffi.Char> domain_name, ffi.Pointer<ffi.Char> type_name, ffi.Pointer<ffi.Void> data_container, ffi.Size data_container_size, ffi.Pointer<ffi.Pointer<OrtValue>> out)>> CreateOpaqueValue;

  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Pointer<ffi.Char> domain_name, ffi.Pointer<ffi.Char> type_name, ffi.Pointer<OrtValue> in1, ffi.Pointer<ffi.Void> data_container, ffi.Size data_container_size)>> GetOpaqueValue;

  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Pointer<OrtKernelInfo> info, ffi.Pointer<ffi.Char> name, ffi.Pointer<ffi.Float> out)>> KernelInfoGetAttribute_float;

  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Pointer<OrtKernelInfo> info, ffi.Pointer<ffi.Char> name, ffi.Pointer<ffi.Int64> out)>> KernelInfoGetAttribute_int64;

  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Pointer<OrtKernelInfo> info, ffi.Pointer<ffi.Char> name, ffi.Pointer<ffi.Char> out, ffi.Pointer<ffi.Size> size)>> KernelInfoGetAttribute_string;

  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Pointer<OrtKernelContext> context, ffi.Pointer<ffi.Size> out)>> KernelContext_GetInputCount;

  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Pointer<OrtKernelContext> context, ffi.Pointer<ffi.Size> out)>> KernelContext_GetOutputCount;

  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Pointer<OrtKernelContext> context, ffi.Size index, ffi.Pointer<ffi.Pointer<OrtValue>> out)>> KernelContext_GetInput;

  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Pointer<OrtKernelContext> context, ffi.Size index, ffi.Pointer<ffi.Int64> dim_values, ffi.Size dim_count, ffi.Pointer<ffi.Pointer<OrtValue>> out)>> KernelContext_GetOutput;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<OrtEnv> input)>> ReleaseEnv;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<OrtStatus> input)>> ReleaseStatus;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<OrtMemoryInfo> input)>> ReleaseMemoryInfo;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<OrtSession> input)>> ReleaseSession;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<OrtValue> input)>> ReleaseValue;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<OrtRunOptions> input)>> ReleaseRunOptions;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<OrtTypeInfo> input)>> ReleaseTypeInfo;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<OrtTensorTypeAndShapeInfo> input)>> ReleaseTensorTypeAndShapeInfo;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<OrtSessionOptions> input)>> ReleaseSessionOptions;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<OrtCustomOpDomain> input)>> ReleaseCustomOpDomain;

  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Pointer<OrtTypeInfo> type_info, ffi.Pointer<ffi.Pointer<ffi.Char>> denotation, ffi.Pointer<ffi.Size> len)>> GetDenotationFromTypeInfo;

  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Pointer<OrtTypeInfo> type_info, ffi.Pointer<ffi.Pointer<OrtMapTypeInfo>> out)>> CastTypeInfoToMapTypeInfo;

  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Pointer<OrtTypeInfo> type_info, ffi.Pointer<ffi.Pointer<OrtSequenceTypeInfo>> out)>> CastTypeInfoToSequenceTypeInfo;

  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Pointer<OrtMapTypeInfo> map_type_info, ffi.Pointer<ffi.Int32> out)>> GetMapKeyType;

  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Pointer<OrtMapTypeInfo> map_type_info, ffi.Pointer<ffi.Pointer<OrtTypeInfo>> type_info)>> GetMapValueType;

  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Pointer<OrtSequenceTypeInfo> sequence_type_info, ffi.Pointer<ffi.Pointer<OrtTypeInfo>> type_info)>> GetSequenceElementType;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<OrtMapTypeInfo> input)>> ReleaseMapTypeInfo;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<OrtSequenceTypeInfo> input)>> ReleaseSequenceTypeInfo;

  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Pointer<OrtSession> session, ffi.Pointer<OrtAllocator> allocator, ffi.Pointer<ffi.Pointer<ffi.Char>> out)>> SessionEndProfiling;

  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Pointer<OrtSession> session, ffi.Pointer<ffi.Pointer<OrtModelMetadata>> out)>> SessionGetModelMetadata;

  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Pointer<OrtModelMetadata> model_metadata, ffi.Pointer<OrtAllocator> allocator, ffi.Pointer<ffi.Pointer<ffi.Char>> value)>> ModelMetadataGetProducerName;

  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Pointer<OrtModelMetadata> model_metadata, ffi.Pointer<OrtAllocator> allocator, ffi.Pointer<ffi.Pointer<ffi.Char>> value)>> ModelMetadataGetGraphName;

  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Pointer<OrtModelMetadata> model_metadata, ffi.Pointer<OrtAllocator> allocator, ffi.Pointer<ffi.Pointer<ffi.Char>> value)>> ModelMetadataGetDomain;

  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Pointer<OrtModelMetadata> model_metadata, ffi.Pointer<OrtAllocator> allocator, ffi.Pointer<ffi.Pointer<ffi.Char>> value)>> ModelMetadataGetDescription;

  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Pointer<OrtModelMetadata> model_metadata, ffi.Pointer<OrtAllocator> allocator, ffi.Pointer<ffi.Char> key, ffi.Pointer<ffi.Pointer<ffi.Char>> value)>> ModelMetadataLookupCustomMetadataMap;

  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Pointer<OrtModelMetadata> model_metadata, ffi.Pointer<ffi.Int64> value)>> ModelMetadataGetVersion;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<OrtModelMetadata> input)>> ReleaseModelMetadata;

  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Int32 log_severity_level, ffi.Pointer<ffi.Char> logid, ffi.Pointer<OrtThreadingOptions> tp_options, ffi.Pointer<ffi.Pointer<OrtEnv>> out)>> CreateEnvWithGlobalThreadPools;

  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Pointer<OrtSessionOptions> options)>> DisablePerSessionThreads;

  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Pointer<ffi.Pointer<OrtThreadingOptions>> out)>> CreateThreadingOptions;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<OrtThreadingOptions> input)>> ReleaseThreadingOptions;

  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Pointer<OrtModelMetadata> model_metadata, ffi.Pointer<OrtAllocator> allocator, ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Char>>> keys, ffi.Pointer<ffi.Int64> num_keys)>> ModelMetadataGetCustomMetadataMapKeys;

  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Pointer<OrtSessionOptions> options, ffi.Pointer<ffi.Char> dim_name, ffi.Int64 dim_value)>> AddFreeDimensionOverrideByName;

  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Char>>> out_ptr, ffi.Pointer<ffi.Int> provider_length)>> GetAvailableProviders;

  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Pointer<ffi.Pointer<ffi.Char>> ptr, ffi.Int providers_length)>> ReleaseAvailableProviders;

  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Pointer<OrtValue> value, ffi.Size index, ffi.Pointer<ffi.Size> out)>> GetStringTensorElementLength;

  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Pointer<OrtValue> value, ffi.Size s_len, ffi.Size index, ffi.Pointer<ffi.Void> s)>> GetStringTensorElement;

  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Pointer<OrtValue> value, ffi.Pointer<ffi.Char> s, ffi.Size index)>> FillStringTensorElement;

  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Pointer<OrtSessionOptions> options, ffi.Pointer<ffi.Char> config_key, ffi.Pointer<ffi.Char> config_value)>> AddSessionConfigEntry;

  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Pointer<OrtSession> session, ffi.Pointer<OrtMemoryInfo> mem_info, ffi.Pointer<ffi.Pointer<OrtAllocator>> out)>> CreateAllocator;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<OrtAllocator> input)>> ReleaseAllocator;

  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Pointer<OrtSession> session, ffi.Pointer<OrtRunOptions> run_options, ffi.Pointer<OrtIoBinding> binding_ptr)>> RunWithBinding;

  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Pointer<OrtSession> session, ffi.Pointer<ffi.Pointer<OrtIoBinding>> out)>> CreateIoBinding;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<OrtIoBinding> input)>> ReleaseIoBinding;

  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Pointer<OrtIoBinding> binding_ptr, ffi.Pointer<ffi.Char> name, ffi.Pointer<OrtValue> val_ptr)>> BindInput;

  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Pointer<OrtIoBinding> binding_ptr, ffi.Pointer<ffi.Char> name, ffi.Pointer<OrtValue> val_ptr)>> BindOutput;

  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Pointer<OrtIoBinding> binding_ptr, ffi.Pointer<ffi.Char> name, ffi.Pointer<OrtMemoryInfo> mem_info_ptr)>> BindOutputToDevice;

  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Pointer<OrtIoBinding> binding_ptr, ffi.Pointer<OrtAllocator> allocator, ffi.Pointer<ffi.Pointer<ffi.Char>> buffer, ffi.Pointer<ffi.Pointer<ffi.Size>> lengths, ffi.Pointer<ffi.Size> count)>> GetBoundOutputNames;

  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Pointer<OrtIoBinding> binding_ptr, ffi.Pointer<OrtAllocator> allocator, ffi.Pointer<ffi.Pointer<ffi.Pointer<OrtValue>>> output, ffi.Pointer<ffi.Size> output_count)>> GetBoundOutputValues;

  /// \brief Clears any previously set Inputs for an ::OrtIoBinding
  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<OrtIoBinding> binding_ptr)>> ClearBoundInputs;

  /// \brief Clears any previously set Outputs for an ::OrtIoBinding
  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<OrtIoBinding> binding_ptr)>> ClearBoundOutputs;

  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Pointer<OrtValue> value, ffi.Pointer<ffi.Int64> location_values, ffi.Size location_values_count, ffi.Pointer<ffi.Pointer<ffi.Void>> out)>> TensorAt;

  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Pointer<OrtEnv> env, ffi.Pointer<OrtMemoryInfo> mem_info, ffi.Pointer<OrtArenaCfg> arena_cfg)>> CreateAndRegisterAllocator;

  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Pointer<OrtEnv> ort_env, ffi.Int32 projection)>> SetLanguageProjection;

  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Pointer<OrtSession> session, ffi.Pointer<ffi.Uint64> out)>> SessionGetProfilingStartTimeNs;

  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Pointer<OrtThreadingOptions> tp_options, ffi.Int intra_op_num_threads)>> SetGlobalIntraOpNumThreads;

  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Pointer<OrtThreadingOptions> tp_options, ffi.Int inter_op_num_threads)>> SetGlobalInterOpNumThreads;

  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Pointer<OrtThreadingOptions> tp_options, ffi.Int allow_spinning)>> SetGlobalSpinControl;

  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Pointer<OrtSessionOptions> options, ffi.Pointer<ffi.Char> name, ffi.Pointer<OrtValue> val)>> AddInitializer;

  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(OrtLoggingFunction logging_function, ffi.Pointer<ffi.Void> logger_param, ffi.Int32 log_severity_level, ffi.Pointer<ffi.Char> logid, ffi.Pointer<OrtThreadingOptions> tp_options, ffi.Pointer<ffi.Pointer<OrtEnv>> out)>> CreateEnvWithCustomLoggerAndGlobalThreadPools;

  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Pointer<OrtSessionOptions> options, ffi.Pointer<OrtCUDAProviderOptions> cuda_options)>> SessionOptionsAppendExecutionProvider_CUDA;

  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Pointer<OrtSessionOptions> options, ffi.Pointer<OrtROCMProviderOptions> rocm_options)>> SessionOptionsAppendExecutionProvider_ROCM;

  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Pointer<OrtSessionOptions> options, ffi.Pointer<OrtOpenVINOProviderOptions> provider_options)>> SessionOptionsAppendExecutionProvider_OpenVINO;

  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Pointer<OrtThreadingOptions> tp_options)>> SetGlobalDenormalAsZero;

  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Size max_mem, ffi.Int arena_extend_strategy, ffi.Int initial_chunk_size_bytes, ffi.Int max_dead_bytes_per_chunk, ffi.Pointer<ffi.Pointer<OrtArenaCfg>> out)>> CreateArenaCfg;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<OrtArenaCfg> input)>> ReleaseArenaCfg;

  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Pointer<OrtModelMetadata> model_metadata, ffi.Pointer<OrtAllocator> allocator, ffi.Pointer<ffi.Pointer<ffi.Char>> value)>> ModelMetadataGetGraphDescription;

  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Pointer<OrtSessionOptions> options, ffi.Pointer<OrtTensorRTProviderOptions> tensorrt_options)>> SessionOptionsAppendExecutionProvider_TensorRT;

  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Int device_id)>> SetCurrentGpuDeviceId;

  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Pointer<ffi.Int> device_id)>> GetCurrentGpuDeviceId;

  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Pointer<OrtKernelInfo> info, ffi.Pointer<ffi.Char> name, ffi.Pointer<ffi.Float> out, ffi.Pointer<ffi.Size> size)>> KernelInfoGetAttributeArray_float;

  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Pointer<OrtKernelInfo> info, ffi.Pointer<ffi.Char> name, ffi.Pointer<ffi.Int64> out, ffi.Pointer<ffi.Size> size)>> KernelInfoGetAttributeArray_int64;

  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Pointer<ffi.Pointer<ffi.Char>> arena_config_keys, ffi.Pointer<ffi.Size> arena_config_values, ffi.Size num_keys, ffi.Pointer<ffi.Pointer<OrtArenaCfg>> out)>> CreateArenaCfgV2;

  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Pointer<OrtRunOptions> options, ffi.Pointer<ffi.Char> config_key, ffi.Pointer<ffi.Char> config_value)>> AddRunConfigEntry;

  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Pointer<ffi.Pointer<OrtPrepackedWeightsContainer>> out)>> CreatePrepackedWeightsContainer;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<OrtPrepackedWeightsContainer> input)>> ReleasePrepackedWeightsContainer;

  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Pointer<OrtEnv> env, ffi.Pointer<ffi.Char> model_path, ffi.Pointer<OrtSessionOptions> options, ffi.Pointer<OrtPrepackedWeightsContainer> prepacked_weights_container, ffi.Pointer<ffi.Pointer<OrtSession>> out)>> CreateSessionWithPrepackedWeightsContainer;

  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Pointer<OrtEnv> env, ffi.Pointer<ffi.Void> model_data, ffi.Size model_data_length, ffi.Pointer<OrtSessionOptions> options, ffi.Pointer<OrtPrepackedWeightsContainer> prepacked_weights_container, ffi.Pointer<ffi.Pointer<OrtSession>> out)>> CreateSessionFromArrayWithPrepackedWeightsContainer;

  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Pointer<OrtSessionOptions> options, ffi.Pointer<OrtTensorRTProviderOptionsV2> tensorrt_options)>> SessionOptionsAppendExecutionProvider_TensorRT_V2;

  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Pointer<ffi.Pointer<OrtTensorRTProviderOptionsV2>> out)>> CreateTensorRTProviderOptions;

  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Pointer<OrtTensorRTProviderOptionsV2> tensorrt_options, ffi.Pointer<ffi.Pointer<ffi.Char>> provider_options_keys, ffi.Pointer<ffi.Pointer<ffi.Char>> provider_options_values, ffi.Size num_keys)>> UpdateTensorRTProviderOptions;

  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Pointer<OrtTensorRTProviderOptionsV2> tensorrt_options, ffi.Pointer<OrtAllocator> allocator, ffi.Pointer<ffi.Pointer<ffi.Char>> ptr)>> GetTensorRTProviderOptionsAsString;

  /// \brief Release an ::OrtTensorRTProviderOptionsV2
  ///
  /// \note This is an exception in the naming convention of other Release* functions, as the name of the method does not have the V2 suffix, but the type does
  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<OrtTensorRTProviderOptionsV2> input)>> ReleaseTensorRTProviderOptions;

  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Pointer<OrtSessionOptions> options)>> EnableOrtCustomOps;

  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Pointer<OrtEnv> env, ffi.Pointer<OrtAllocator> allocator)>> RegisterAllocator;

  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Pointer<OrtEnv> env, ffi.Pointer<OrtMemoryInfo> mem_info)>> UnregisterAllocator;

  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Pointer<OrtValue> value, ffi.Pointer<ffi.Int> out)>> IsSparseTensor;

  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Pointer<OrtAllocator> allocator, ffi.Pointer<ffi.Int64> dense_shape, ffi.Size dense_shape_len, ffi.Int32 type, ffi.Pointer<ffi.Pointer<OrtValue>> out)>> CreateSparseTensorAsOrtValue;

  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Pointer<OrtValue> ort_value, ffi.Pointer<OrtMemoryInfo> data_mem_info, ffi.Pointer<ffi.Int64> values_shape, ffi.Size values_shape_len, ffi.Pointer<ffi.Void> values, ffi.Pointer<ffi.Int64> indices_data, ffi.Size indices_num)>> FillSparseTensorCoo;

  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Pointer<OrtValue> ort_value, ffi.Pointer<OrtMemoryInfo> data_mem_info, ffi.Pointer<ffi.Int64> values_shape, ffi.Size values_shape_len, ffi.Pointer<ffi.Void> values, ffi.Pointer<ffi.Int64> inner_indices_data, ffi.Size inner_indices_num, ffi.Pointer<ffi.Int64> outer_indices_data, ffi.Size outer_indices_num)>> FillSparseTensorCsr;

  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Pointer<OrtValue> ort_value, ffi.Pointer<OrtMemoryInfo> data_mem_info, ffi.Pointer<ffi.Int64> values_shape, ffi.Size values_shape_len, ffi.Pointer<ffi.Void> values, ffi.Pointer<ffi.Int64> indices_shape_data, ffi.Size indices_shape_len, ffi.Pointer<ffi.Int32> indices_data)>> FillSparseTensorBlockSparse;

  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Pointer<OrtMemoryInfo> info, ffi.Pointer<ffi.Void> p_data, ffi.Pointer<ffi.Int64> dense_shape, ffi.Size dense_shape_len, ffi.Pointer<ffi.Int64> values_shape, ffi.Size values_shape_len, ffi.Int32 type, ffi.Pointer<ffi.Pointer<OrtValue>> out)>> CreateSparseTensorWithValuesAsOrtValue;

  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Pointer<OrtValue> ort_value, ffi.Pointer<ffi.Int64> indices_data, ffi.Size indices_num)>> UseCooIndices;

  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Pointer<OrtValue> ort_value, ffi.Pointer<ffi.Int64> inner_data, ffi.Size inner_num, ffi.Pointer<ffi.Int64> outer_data, ffi.Size outer_num)>> UseCsrIndices;

  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Pointer<OrtValue> ort_value, ffi.Pointer<ffi.Int64> indices_shape, ffi.Size indices_shape_len, ffi.Pointer<ffi.Int32> indices_data)>> UseBlockSparseIndices;

  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Pointer<OrtValue> ort_value, ffi.Pointer<ffi.Int32> out)>> GetSparseTensorFormat;

  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Pointer<OrtValue> ort_value, ffi.Pointer<ffi.Pointer<OrtTensorTypeAndShapeInfo>> out)>> GetSparseTensorValuesTypeAndShape;

  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Pointer<OrtValue> ort_value, ffi.Pointer<ffi.Pointer<ffi.Void>> out)>> GetSparseTensorValues;

  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Pointer<OrtValue> ort_value, ffi.Int32 indices_format, ffi.Pointer<ffi.Pointer<OrtTensorTypeAndShapeInfo>> out)>> GetSparseTensorIndicesTypeShape;

  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Pointer<OrtValue> ort_value, ffi.Int32 indices_format, ffi.Pointer<ffi.Size> num_indices, ffi.Pointer<ffi.Pointer<ffi.Void>> indices)>> GetSparseTensorIndices;

  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Pointer<OrtValue> value, ffi.Pointer<ffi.Int> out)>> HasValue;

  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Pointer<OrtKernelContext> context, ffi.Pointer<ffi.Pointer<ffi.Void>> out)>> KernelContext_GetGPUComputeStream;

  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Pointer<OrtValue> value, ffi.Pointer<ffi.Pointer<OrtMemoryInfo>> mem_info)>> GetTensorMemoryInfo;

  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Pointer<ffi.Char> provider_name, ffi.Uint32 version, ffi.Pointer<ffi.Pointer<ffi.Void>> provider_api)>> GetExecutionProviderApi;

  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Pointer<OrtSessionOptions> options, OrtCustomCreateThreadFn ort_custom_create_thread_fn)>> SessionOptionsSetCustomCreateThreadFn;

  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Pointer<OrtSessionOptions> options, ffi.Pointer<ffi.Void> ort_custom_thread_creation_options)>> SessionOptionsSetCustomThreadCreationOptions;

  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Pointer<OrtSessionOptions> options, OrtCustomJoinThreadFn ort_custom_join_thread_fn)>> SessionOptionsSetCustomJoinThreadFn;

  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Pointer<OrtThreadingOptions> tp_options, OrtCustomCreateThreadFn ort_custom_create_thread_fn)>> SetGlobalCustomCreateThreadFn;

  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Pointer<OrtThreadingOptions> tp_options, ffi.Pointer<ffi.Void> ort_custom_thread_creation_options)>> SetGlobalCustomThreadCreationOptions;

  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Pointer<OrtThreadingOptions> tp_options, OrtCustomJoinThreadFn ort_custom_join_thread_fn)>> SetGlobalCustomJoinThreadFn;

  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Pointer<OrtIoBinding> binding_ptr)>> SynchronizeBoundInputs;

  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Pointer<OrtIoBinding> binding_ptr)>> SynchronizeBoundOutputs;

  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Pointer<OrtSessionOptions> options, ffi.Pointer<OrtCUDAProviderOptionsV2> cuda_options)>> SessionOptionsAppendExecutionProvider_CUDA_V2;

  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Pointer<ffi.Pointer<OrtCUDAProviderOptionsV2>> out)>> CreateCUDAProviderOptions;

  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Pointer<OrtCUDAProviderOptionsV2> cuda_options, ffi.Pointer<ffi.Pointer<ffi.Char>> provider_options_keys, ffi.Pointer<ffi.Pointer<ffi.Char>> provider_options_values, ffi.Size num_keys)>> UpdateCUDAProviderOptions;

  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Pointer<OrtCUDAProviderOptionsV2> cuda_options, ffi.Pointer<OrtAllocator> allocator, ffi.Pointer<ffi.Pointer<ffi.Char>> ptr)>> GetCUDAProviderOptionsAsString;

  /// \brief Release an ::OrtCUDAProviderOptionsV2
  ///
  /// \note This is an exception in the naming convention of other Release* functions, as the name of the method does not have the V2 suffix, but the type does
  ///
  /// \since Version 1.11.
  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<OrtCUDAProviderOptionsV2> input)>> ReleaseCUDAProviderOptions;

  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Pointer<OrtSessionOptions> options, ffi.Pointer<OrtMIGraphXProviderOptions> migraphx_options)>> SessionOptionsAppendExecutionProvider_MIGraphX;

  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Pointer<OrtSessionOptions> options, ffi.Pointer<ffi.Pointer<ffi.Char>> initializer_names, ffi.Pointer<ffi.Pointer<OrtValue>> initializers, ffi.Size initializers_num)>> AddExternalInitializers;

  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Pointer<ffi.Char> name, ffi.Pointer<ffi.Void> data, ffi.Int len, ffi.Int32 type, ffi.Pointer<ffi.Pointer<OrtOpAttr>> op_attr)>> CreateOpAttr;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<OrtOpAttr> input)>> ReleaseOpAttr;

  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Pointer<OrtKernelInfo> info, ffi.Pointer<ffi.Char> op_name, ffi.Pointer<ffi.Char> domain, ffi.Int version, ffi.Pointer<ffi.Pointer<ffi.Char>> type_constraint_names, ffi.Pointer<ffi.Int32> type_constraint_values, ffi.Int type_constraint_count, ffi.Pointer<ffi.Pointer<OrtOpAttr>> attr_values, ffi.Int attr_count, ffi.Int input_count, ffi.Int output_count, ffi.Pointer<ffi.Pointer<OrtOp>> ort_op)>> CreateOp;

  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Pointer<OrtKernelContext> context, ffi.Pointer<OrtOp> ort_op, ffi.Pointer<ffi.Pointer<OrtValue>> input_values, ffi.Int input_count, ffi.Pointer<ffi.Pointer<OrtValue>> output_values, ffi.Int output_count)>> InvokeOp;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<OrtOp> input)>> ReleaseOp;

  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Pointer<OrtSessionOptions> options, ffi.Pointer<ffi.Char> provider_name, ffi.Pointer<ffi.Pointer<ffi.Char>> provider_options_keys, ffi.Pointer<ffi.Pointer<ffi.Char>> provider_options_values, ffi.Size num_keys)>> SessionOptionsAppendExecutionProvider;

  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Pointer<OrtKernelInfo> info, ffi.Pointer<ffi.Pointer<OrtKernelInfo>> info_copy)>> CopyKernelInfo;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<OrtKernelInfo> input)>> ReleaseKernelInfo;

  /// \name Ort Training
  /// @{
  ///   /** \brief Gets the Training C Api struct
  ///    *
  ///    * Call this function to access the ::OrtTrainingApi structure that holds pointers to functions that enable
  ///    * training with onnxruntime.
  ///    * \note A NULL pointer will be returned and no error message will be printed if the training api
  ///    * is not supported with this build. A NULL pointer will be returned and an error message will be
  ///    * printed if the provided version is unsupported, for example when using a runtime older than the
  ///    * version created with this header file.
  ///    *
  ///    * \param[in] version Must be ::ORT_API_VERSION
  ///    * \return The ::OrtTrainingApi struct for the version requested.
  ///    *
  ///    * \since Version 1.13
  ///    */
  external ffi.Pointer<ffi.NativeFunction<ffi.Pointer<OrtTrainingApi> Function(ffi.Uint32 version)>> GetTrainingApi;

  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Pointer<OrtSessionOptions> options, ffi.Pointer<OrtCANNProviderOptions> cann_options)>> SessionOptionsAppendExecutionProvider_CANN;

  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Pointer<ffi.Pointer<OrtCANNProviderOptions>> out)>> CreateCANNProviderOptions;

  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Pointer<OrtCANNProviderOptions> cann_options, ffi.Pointer<ffi.Pointer<ffi.Char>> provider_options_keys, ffi.Pointer<ffi.Pointer<ffi.Char>> provider_options_values, ffi.Size num_keys)>> UpdateCANNProviderOptions;

  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Pointer<OrtCANNProviderOptions> cann_options, ffi.Pointer<OrtAllocator> allocator, ffi.Pointer<ffi.Pointer<ffi.Char>> ptr)>> GetCANNProviderOptionsAsString;

  /// \brief Release an OrtCANNProviderOptions
  ///
  /// \param[in] the pointer of OrtCANNProviderOptions which will been deleted
  ///
  /// \since Version 1.13.
  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<OrtCANNProviderOptions> input)>> ReleaseCANNProviderOptions;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<OrtMemoryInfo> ptr, ffi.Pointer<ffi.Int32> out)>> MemoryInfoGetDeviceType;

  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Pointer<OrtEnv> ort_env, ffi.Int32 log_severity_level)>> UpdateEnvWithCustomLogLevel;

  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Pointer<OrtThreadingOptions> tp_options, ffi.Pointer<ffi.Char> affinity_string)>> SetGlobalIntraOpThreadAffinity;

  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Pointer<OrtSessionOptions> options, ffi.Pointer<ffi.Char> library_name)>> RegisterCustomOpsLibrary_V2;

  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Pointer<OrtSessionOptions> options, ffi.Pointer<ffi.Char> registration_func_name)>> RegisterCustomOpsUsingFunction;

  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Pointer<OrtKernelInfo> info, ffi.Pointer<ffi.Size> out)>> KernelInfo_GetInputCount;

  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Pointer<OrtKernelInfo> info, ffi.Pointer<ffi.Size> out)>> KernelInfo_GetOutputCount;

  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Pointer<OrtKernelInfo> info, ffi.Size index, ffi.Pointer<ffi.Char> out, ffi.Pointer<ffi.Size> size)>> KernelInfo_GetInputName;

  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Pointer<OrtKernelInfo> info, ffi.Size index, ffi.Pointer<ffi.Char> out, ffi.Pointer<ffi.Size> size)>> KernelInfo_GetOutputName;

  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Pointer<OrtKernelInfo> info, ffi.Size index, ffi.Pointer<ffi.Pointer<OrtTypeInfo>> type_info)>> KernelInfo_GetInputTypeInfo;

  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Pointer<OrtKernelInfo> info, ffi.Size index, ffi.Pointer<ffi.Pointer<OrtTypeInfo>> type_info)>> KernelInfo_GetOutputTypeInfo;

  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Pointer<OrtKernelInfo> info, ffi.Pointer<ffi.Char> name, ffi.Pointer<OrtAllocator> allocator, ffi.Pointer<ffi.Pointer<OrtValue>> out)>> KernelInfoGetAttribute_tensor;

  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Pointer<OrtSessionOptions> options, ffi.Pointer<ffi.Char> config_key, ffi.Pointer<ffi.Int> out)>> HasSessionConfigEntry;

  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Pointer<OrtSessionOptions> options, ffi.Pointer<ffi.Char> config_key, ffi.Pointer<ffi.Char> config_value, ffi.Pointer<ffi.Size> size)>> GetSessionConfigEntry;

  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Pointer<OrtSessionOptions> options, ffi.Pointer<OrtDnnlProviderOptions> dnnl_options)>> SessionOptionsAppendExecutionProvider_Dnnl;

  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Pointer<ffi.Pointer<OrtDnnlProviderOptions>> out)>> CreateDnnlProviderOptions;

  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Pointer<OrtDnnlProviderOptions> dnnl_options, ffi.Pointer<ffi.Pointer<ffi.Char>> provider_options_keys, ffi.Pointer<ffi.Pointer<ffi.Char>> provider_options_values, ffi.Size num_keys)>> UpdateDnnlProviderOptions;

  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Pointer<OrtDnnlProviderOptions> dnnl_options, ffi.Pointer<OrtAllocator> allocator, ffi.Pointer<ffi.Pointer<ffi.Char>> ptr)>> GetDnnlProviderOptionsAsString;

  /// \brief Release an ::OrtDnnlProviderOptions
  ///
  /// \since Version 1.15.
  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<OrtDnnlProviderOptions> input)>> ReleaseDnnlProviderOptions;

  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Pointer<OrtKernelInfo> info, ffi.Pointer<ffi.Char> out, ffi.Pointer<ffi.Size> size)>> KernelInfo_GetNodeName;

  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Pointer<OrtKernelInfo> info, ffi.Pointer<ffi.Pointer<OrtLogger>> logger)>> KernelInfo_GetLogger;

  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Pointer<OrtKernelContext> context, ffi.Pointer<ffi.Pointer<OrtLogger>> logger)>> KernelContext_GetLogger;

  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Pointer<OrtLogger> logger, ffi.Int32 log_severity_level, ffi.Pointer<ffi.Char> message, ffi.Pointer<ffi.Char> file_path, ffi.Int line_number, ffi.Pointer<ffi.Char> func_name)>> Logger_LogMessage;

  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Pointer<OrtLogger> logger, ffi.Pointer<ffi.Int32> out)>> Logger_GetLoggingSeverityLevel;

  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Pointer<OrtKernelInfo> info, ffi.Size index, ffi.Pointer<ffi.Int> is_constant, ffi.Pointer<ffi.Pointer<OrtValue>> out)>> KernelInfoGetConstantInput_tensor;

  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Pointer<OrtTypeInfo> type_info, ffi.Pointer<ffi.Pointer<OrtOptionalTypeInfo>> out)>> CastTypeInfoToOptionalTypeInfo;

  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Pointer<OrtOptionalTypeInfo> optional_type_info, ffi.Pointer<ffi.Pointer<OrtTypeInfo>> out)>> GetOptionalContainedTypeInfo;

  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Pointer<OrtValue> value, ffi.Size index, ffi.Size length_in_bytes, ffi.Pointer<ffi.Pointer<ffi.Char>> buffer)>> GetResizedStringTensorElementBuffer;

  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Pointer<OrtKernelContext> context, ffi.Pointer<OrtMemoryInfo> mem_info, ffi.Pointer<ffi.Pointer<OrtAllocator>> out)>> KernelContext_GetAllocator;

  /// \brief Returns a null terminated string of the build info including git info and cxx flags
  ///
  /// \return UTF-8 encoded version string. Do not deallocate the returned buffer.
  ///
  /// \since Version 1.15.
  external ffi.Pointer<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>> GetBuildInfoString;

  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Pointer<ffi.Pointer<OrtROCMProviderOptions>> out)>> CreateROCMProviderOptions;

  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Pointer<OrtROCMProviderOptions> rocm_options, ffi.Pointer<ffi.Pointer<ffi.Char>> provider_options_keys, ffi.Pointer<ffi.Pointer<ffi.Char>> provider_options_values, ffi.Size num_keys)>> UpdateROCMProviderOptions;

  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Pointer<OrtROCMProviderOptions> rocm_options, ffi.Pointer<OrtAllocator> allocator, ffi.Pointer<ffi.Pointer<ffi.Char>> ptr)>> GetROCMProviderOptionsAsString;

  /// \brief Release an ::OrtROCMProviderOptions
  ///
  /// \note This is an exception in the naming convention of other Release* functions, as the name of the method does not have the V2 suffix, but the type does
  ///
  /// \since Version 1.16.
  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<OrtROCMProviderOptions> input)>> ReleaseROCMProviderOptions;

  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Pointer<OrtEnv> env, ffi.Pointer<ffi.Char> provider_type, ffi.Pointer<OrtMemoryInfo> mem_info, ffi.Pointer<OrtArenaCfg> arena_cfg, ffi.Pointer<ffi.Pointer<ffi.Char>> provider_options_keys, ffi.Pointer<ffi.Pointer<ffi.Char>> provider_options_values, ffi.Size num_keys)>> CreateAndRegisterAllocatorV2;

  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Pointer<OrtSession> session, ffi.Pointer<OrtRunOptions> run_options, ffi.Pointer<ffi.Pointer<ffi.Char>> input_names, ffi.Pointer<ffi.Pointer<OrtValue>> input, ffi.Size input_len, ffi.Pointer<ffi.Pointer<ffi.Char>> output_names, ffi.Size output_names_len, ffi.Pointer<ffi.Pointer<OrtValue>> output, RunAsyncCallbackFn run_async_callback, ffi.Pointer<ffi.Void> user_data)>> RunAsync;

  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Pointer<OrtTensorRTProviderOptionsV2> tensorrt_options, ffi.Pointer<ffi.Char> key, ffi.Pointer<ffi.Void> value)>> UpdateTensorRTProviderOptionsWithValue;

  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Pointer<OrtTensorRTProviderOptionsV2> tensorrt_options, ffi.Pointer<ffi.Char> key, ffi.Pointer<ffi.Pointer<ffi.Void>> ptr)>> GetTensorRTProviderOptionsByName;

  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Pointer<OrtCUDAProviderOptionsV2> cuda_options, ffi.Pointer<ffi.Char> key, ffi.Pointer<ffi.Void> value)>> UpdateCUDAProviderOptionsWithValue;

  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Pointer<OrtCUDAProviderOptionsV2> cuda_options, ffi.Pointer<ffi.Char> key, ffi.Pointer<ffi.Pointer<ffi.Void>> ptr)>> GetCUDAProviderOptionsByName;

  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Pointer<OrtKernelContext> context, ffi.Int resouce_version, ffi.Int resource_id, ffi.Pointer<ffi.Pointer<ffi.Void>> resource)>> KernelContext_GetResource;
}

typedef OrtStatusPtr = ffi.Pointer<OrtStatus>;
typedef OrtLoggingFunction = ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void> param, ffi.Int32 severity, ffi.Pointer<ffi.Char> category, ffi.Pointer<ffi.Char> logid, ffi.Pointer<ffi.Char> code_location, ffi.Pointer<ffi.Char> message)>>;

abstract class OrtAllocatorType {
  static const int OrtInvalidAllocator = -1;
  static const int OrtDeviceAllocator = 0;
  static const int OrtArenaAllocator = 1;
}

/// \brief Memory types for allocated memory, execution provider specific types should be extended in each provider.
abstract class OrtMemType {
  /// < Any CPU memory used by non-CPU execution provider
  static const int OrtMemTypeCPUInput = -2;

  /// < CPU accessible memory outputted by non-CPU execution provider, i.e. CUDA_PINNED
  static const int OrtMemTypeCPUOutput = -1;

  /// < Temporary CPU accessible memory allocated by non-CPU execution provider, i.e. CUDA_PINNED
  static const int OrtMemTypeCPU = -1;

  /// < The default allocator for execution provider
  static const int OrtMemTypeDefault = 0;
}

/// \brief CUDA Provider Options
///
/// \see OrtApi::SessionOptionsAppendExecutionProvider_CUDA
final class OrtCUDAProviderOptions extends ffi.Struct {
  /// \brief CUDA device Id
  /// Defaults to 0.
  @ffi.Int()
  external int device_id;

  /// \brief CUDA Convolution algorithm search configuration.
  /// See enum OrtCudnnConvAlgoSearch for more details.
  /// Defaults to OrtCudnnConvAlgoSearchExhaustive.
  @ffi.Int32()
  external int cudnn_conv_algo_search;

  /// \brief CUDA memory limit (To use all possible memory pass in maximum size_t)
  /// Defaults to SIZE_MAX.
  /// \note If a ::OrtArenaCfg has been applied, it will override this field
  @ffi.Size()
  external int gpu_mem_limit;

  /// \brief Strategy used to grow the memory arena
  /// 0 = kNextPowerOfTwo<br>
  /// 1 = kSameAsRequested<br>
  /// Defaults to 0.
  /// \note If a ::OrtArenaCfg has been applied, it will override this field
  @ffi.Int()
  external int arena_extend_strategy;

  /// \brief Flag indicating if copying needs to take place on the same stream as the compute stream in the CUDA EP
  /// 0 = Use separate streams for copying and compute.
  /// 1 = Use the same stream for copying and compute.
  /// Defaults to 1.
  /// WARNING: Setting this to 0 may result in data races for some models.
  /// Please see issue #4829 for more details.
  @ffi.Int()
  external int do_copy_in_default_stream;

  /// \brief Flag indicating if there is a user provided compute stream
  /// Defaults to 0.
  @ffi.Int()
  external int has_user_compute_stream;

  /// \brief User provided compute stream.
  /// If provided, please set `has_user_compute_stream` to 1.
  external ffi.Pointer<ffi.Void> user_compute_stream;

  /// \brief CUDA memory arena configuration parameters
  external ffi.Pointer<OrtArenaCfg> default_memory_arena_cfg;

  /// \brief Enable TunableOp for using.
  /// Set it to 1/0 to enable/disable TunableOp. Otherwise, it is disabled by default.
  /// This option can be overriden by environment variable ORT_CUDA_TUNABLE_OP_ENABLE.
  @ffi.Int()
  external int tunable_op_enable;

  /// \brief Enable TunableOp for tuning.
  /// Set it to 1/0 to enable/disable TunableOp tuning. Otherwise, it is disabled by default.
  /// This option can be overriden by environment variable ORT_CUDA_TUNABLE_OP_TUNING_ENABLE.
  @ffi.Int()
  external int tunable_op_tuning_enable;

  /// \brief Max tuning duration time limit for each instance of TunableOp.
  /// Defaults to 0 to disable the limit.
  @ffi.Int()
  external int tunable_op_max_tuning_duration_ms;
}

/// \brief Algorithm to use for cuDNN Convolution Op
abstract class OrtCudnnConvAlgoSearch {
  static const int OrtCudnnConvAlgoSearchExhaustive = 0;
  static const int OrtCudnnConvAlgoSearchHeuristic = 1;
  static const int OrtCudnnConvAlgoSearchDefault = 2;
}

/// \brief ROCM Provider Options
///
/// \see OrtApi::SessionOptionsAppendExecutionProvider_ROCM
final class OrtROCMProviderOptions extends ffi.Struct {
  /// \brief ROCM device Id
  /// Defaults to 0.
  @ffi.Int()
  external int device_id;

  /// \brief ROCM MIOpen Convolution algorithm exaustive search option.
  /// Defaults to 0 (false).
  @ffi.Int()
  external int miopen_conv_exhaustive_search;

  /// \brief ROCM memory limit (To use all possible memory pass in maximum size_t)
  /// Defaults to SIZE_MAX.
  /// \note If a ::OrtArenaCfg has been applied, it will override this field
  @ffi.Size()
  external int gpu_mem_limit;

  /// \brief Strategy used to grow the memory arena
  /// 0 = kNextPowerOfTwo<br>
  /// 1 = kSameAsRequested<br>
  /// Defaults to 0.
  /// \note If a ::OrtArenaCfg has been applied, it will override this field
  @ffi.Int()
  external int arena_extend_strategy;

  /// \brief Flag indicating if copying needs to take place on the same stream as the compute stream in the ROCM EP
  /// 0 = Use separate streams for copying and compute.
  /// 1 = Use the same stream for copying and compute.
  /// Defaults to 1.
  /// WARNING: Setting this to 0 may result in data races for some models.
  /// Please see issue #4829 for more details.
  @ffi.Int()
  external int do_copy_in_default_stream;

  /// \brief Flag indicating if there is a user provided compute stream
  /// Defaults to 0.
  @ffi.Int()
  external int has_user_compute_stream;

  /// \brief User provided compute stream.
  /// If provided, please set `has_user_compute_stream` to 1.
  external ffi.Pointer<ffi.Void> user_compute_stream;

  /// \brief ROCM memory arena configuration parameters
  external ffi.Pointer<OrtArenaCfg> default_memory_arena_cfg;

  /// \brief Enable TunableOp for using.
  /// Set it to 1/0 to enable/disable TunableOp. Otherwise, it is disabled by default.
  /// This option can be overriden by environment variable ORT_ROCM_TUNABLE_OP_ENABLE.
  @ffi.Int()
  external int tunable_op_enable;

  /// \brief Enable TunableOp for tuning.
  /// Set it to 1/0 to enable/disable TunableOp tuning. Otherwise, it is disabled by default.
  /// This option can be overriden by environment variable ORT_ROCM_TUNABLE_OP_TUNING_ENABLE.
  @ffi.Int()
  external int tunable_op_tuning_enable;

  /// \brief Max tuning duration time limit for each instance of TunableOp.
  /// Defaults to 0 to disable the limit.
  @ffi.Int()
  external int tunable_op_max_tuning_duration_ms;
}

/// \brief OpenVINO Provider Options
///
/// \see OrtApi::SessionOptionsAppendExecutionProvider_OpenVINO
final class OrtOpenVINOProviderOptions extends ffi.Struct {
  /// \brief Device type string
  ///
  /// Valid settings are one of: "CPU_FP32", "CPU_FP16", "GPU_FP32", "GPU_FP16"
  external ffi.Pointer<ffi.Char> device_type;

  /// < 0 = disabled, nonzero = enabled
  @ffi.UnsignedChar()
  external int enable_vpu_fast_compile;

  external ffi.Pointer<ffi.Char> device_id;

  /// < 0 = Use default number of threads
  @ffi.Size()
  external int num_of_threads;

  external ffi.Pointer<ffi.Char> cache_dir;

  external ffi.Pointer<ffi.Void> context;

  /// < 0 = disabled, nonzero = enabled
  @ffi.UnsignedChar()
  external int enable_opencl_throttling;

  /// < 0 = disabled, nonzero = enabled
  @ffi.UnsignedChar()
  external int enable_dynamic_shapes;
}

/// \brief TensorRT Provider Options
///
/// \see OrtApi::SessionOptionsAppendExecutionProvider_TensorRT
final class OrtTensorRTProviderOptions extends ffi.Struct {
  /// < CUDA device id (0 = default device)
  @ffi.Int()
  external int device_id;

  @ffi.Int()
  external int has_user_compute_stream;

  external ffi.Pointer<ffi.Void> user_compute_stream;

  @ffi.Int()
  external int trt_max_partition_iterations;

  @ffi.Int()
  external int trt_min_subgraph_size;

  @ffi.Size()
  external int trt_max_workspace_size;

  @ffi.Int()
  external int trt_fp16_enable;

  @ffi.Int()
  external int trt_int8_enable;

  external ffi.Pointer<ffi.Char> trt_int8_calibration_table_name;

  @ffi.Int()
  external int trt_int8_use_native_calibration_table;

  @ffi.Int()
  external int trt_dla_enable;

  @ffi.Int()
  external int trt_dla_core;

  @ffi.Int()
  external int trt_dump_subgraphs;

  @ffi.Int()
  external int trt_engine_cache_enable;

  external ffi.Pointer<ffi.Char> trt_engine_cache_path;

  @ffi.Int()
  external int trt_engine_decryption_enable;

  external ffi.Pointer<ffi.Char> trt_engine_decryption_lib_path;

  @ffi.Int()
  external int trt_force_sequential_engine_build;
}

/// \brief Ort custom thread creation function
///
/// The function should return a thread handle to be used in onnxruntime thread pools
/// Onnxruntime will throw exception on return value of nullptr or 0, indicating that the function failed to create a thread
typedef OrtCustomCreateThreadFn = ffi.Pointer<ffi.NativeFunction<OrtCustomThreadHandle Function(ffi.Pointer<ffi.Void> ort_custom_thread_creation_options, OrtThreadWorkerFn ort_thread_worker_fn, ffi.Pointer<ffi.Void> ort_worker_fn_param)>>;
typedef OrtCustomThreadHandle = ffi.Pointer<OrtCustomHandleType>;

final class OrtCustomHandleType extends ffi.Struct {
  @ffi.Char()
  external int __place_holder;
}

/// \brief Thread work loop function
///
/// Onnxruntime will provide the working loop on custom thread creation
/// Argument is an onnxruntime built-in type which will be provided when thread pool calls OrtCustomCreateThreadFn
typedef OrtThreadWorkerFn = ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void> ort_worker_fn_param)>>;

/// \brief Custom thread join function
///
/// Onnxruntime thread pool destructor will call the function to join a custom thread.
/// Argument ort_custom_thread_handle is the value returned by OrtCustomCreateThreadFn
typedef OrtCustomJoinThreadFn = ffi.Pointer<ffi.NativeFunction<ffi.Void Function(OrtCustomThreadHandle ort_custom_thread_handle)>>;

/// \brief MIGraphX Provider Options
///
/// \see OrtApi::SessionOptionsAppendExecutionProvider_MIGraphX
final class OrtMIGraphXProviderOptions extends ffi.Struct {
  @ffi.Int()
  external int device_id;

  @ffi.Int()
  external int migraphx_fp16_enable;

  @ffi.Int()
  external int migraphx_int8_enable;
}

/// \brief The Training C API that holds onnxruntime training function pointers
///
/// All the Training C API functions are defined inside this structure as pointers to functions.
/// Call OrtApi::GetTrainingApi to get a pointer to this struct.
///
/// \nosubgrouping
final class OrtTrainingApi extends ffi.Struct {
  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Pointer<ffi.Char> checkpoint_path, ffi.Pointer<ffi.Pointer<OrtCheckpointState>> checkpoint_state)>> LoadCheckpoint;

  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Pointer<OrtCheckpointState> checkpoint_state, ffi.Pointer<ffi.Char> checkpoint_path, ffi.Bool include_optimizer_state)>> SaveCheckpoint;

  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Pointer<OrtEnv> env, ffi.Pointer<OrtSessionOptions> options, ffi.Pointer<OrtCheckpointState> checkpoint_state, ffi.Pointer<ffi.Char> train_model_path, ffi.Pointer<ffi.Char> eval_model_path, ffi.Pointer<ffi.Char> optimizer_model_path, ffi.Pointer<ffi.Pointer<OrtTrainingSession>> out)>> CreateTrainingSession;

  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Pointer<OrtEnv> env, ffi.Pointer<OrtSessionOptions> options, ffi.Pointer<OrtCheckpointState> checkpoint_state, ffi.Pointer<ffi.Void> train_model_data, ffi.Size train_data_length, ffi.Pointer<ffi.Void> eval_model_data, ffi.Size eval_data_length, ffi.Pointer<ffi.Void> optim_model_data, ffi.Size optim_data_length, ffi.Pointer<ffi.Pointer<OrtTrainingSession>> out)>> CreateTrainingSessionFromBuffer;

  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Pointer<OrtTrainingSession> sess, ffi.Pointer<ffi.Size> out)>> TrainingSessionGetTrainingModelOutputCount;

  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Pointer<OrtTrainingSession> sess, ffi.Pointer<ffi.Size> out)>> TrainingSessionGetEvalModelOutputCount;

  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Pointer<OrtTrainingSession> sess, ffi.Size index, ffi.Pointer<OrtAllocator> allocator, ffi.Pointer<ffi.Pointer<ffi.Char>> output)>> TrainingSessionGetTrainingModelOutputName;

  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Pointer<OrtTrainingSession> sess, ffi.Size index, ffi.Pointer<OrtAllocator> allocator, ffi.Pointer<ffi.Pointer<ffi.Char>> output)>> TrainingSessionGetEvalModelOutputName;

  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Pointer<OrtTrainingSession> session)>> LazyResetGrad;

  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Pointer<OrtTrainingSession> sess, ffi.Pointer<OrtRunOptions> run_options, ffi.Size inputs_len, ffi.Pointer<ffi.Pointer<OrtValue>> inputs, ffi.Size outputs_len, ffi.Pointer<ffi.Pointer<OrtValue>> outputs)>> TrainStep;

  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Pointer<OrtTrainingSession> sess, ffi.Pointer<OrtRunOptions> run_options, ffi.Size inputs_len, ffi.Pointer<ffi.Pointer<OrtValue>> inputs, ffi.Size outputs_len, ffi.Pointer<ffi.Pointer<OrtValue>> outputs)>> EvalStep;

  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Pointer<OrtTrainingSession> sess, ffi.Float learning_rate)>> SetLearningRate;

  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Pointer<OrtTrainingSession> sess, ffi.Pointer<ffi.Float> learning_rate)>> GetLearningRate;

  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Pointer<OrtTrainingSession> sess, ffi.Pointer<OrtRunOptions> run_options)>> OptimizerStep;

  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Pointer<OrtTrainingSession> sess, ffi.Int64 warmup_step_count, ffi.Int64 total_step_count, ffi.Float initial_lr)>> RegisterLinearLRScheduler;

  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Pointer<OrtTrainingSession> sess)>> SchedulerStep;

  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Pointer<OrtTrainingSession> sess, ffi.Pointer<ffi.Size> out, ffi.Bool trainable_only)>> GetParametersSize;

  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Pointer<OrtTrainingSession> sess, ffi.Pointer<OrtValue> parameters_buffer, ffi.Bool trainable_only)>> CopyParametersToBuffer;

  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Pointer<OrtTrainingSession> sess, ffi.Pointer<OrtValue> parameters_buffer, ffi.Bool trainable_only)>> CopyBufferToParameters;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<OrtTrainingSession> input)>> ReleaseTrainingSession;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<OrtCheckpointState> input)>> ReleaseCheckpointState;

  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Pointer<OrtTrainingSession> sess, ffi.Pointer<ffi.Char> inference_model_path, ffi.Size graph_outputs_len, ffi.Pointer<ffi.Pointer<ffi.Char>> graph_output_names)>> ExportModelForInferencing;

  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Int64 seed)>> SetSeed;

  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Pointer<OrtTrainingSession> sess, ffi.Pointer<ffi.Size> out)>> TrainingSessionGetTrainingModelInputCount;

  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Pointer<OrtTrainingSession> sess, ffi.Pointer<ffi.Size> out)>> TrainingSessionGetEvalModelInputCount;

  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Pointer<OrtTrainingSession> sess, ffi.Size index, ffi.Pointer<OrtAllocator> allocator, ffi.Pointer<ffi.Pointer<ffi.Char>> output)>> TrainingSessionGetTrainingModelInputName;

  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Pointer<OrtTrainingSession> sess, ffi.Size index, ffi.Pointer<OrtAllocator> allocator, ffi.Pointer<ffi.Pointer<ffi.Char>> output)>> TrainingSessionGetEvalModelInputName;

  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Pointer<OrtCheckpointState> checkpoint_state, ffi.Pointer<ffi.Char> property_name, ffi.Int32 property_type, ffi.Pointer<ffi.Void> property_value)>> AddProperty;

  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Pointer<OrtCheckpointState> checkpoint_state, ffi.Pointer<ffi.Char> property_name, ffi.Pointer<OrtAllocator> allocator, ffi.Pointer<ffi.Int32> property_type, ffi.Pointer<ffi.Pointer<ffi.Void>> property_value)>> GetProperty;

  external ffi.Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Pointer<ffi.Void> checkpoint_buffer, ffi.Size num_bytes, ffi.Pointer<ffi.Pointer<OrtCheckpointState>> checkpoint_state)>> LoadCheckpointFromBuffer;
}

final class OrtCheckpointState extends ffi.Opaque {}

final class OrtTrainingSession extends ffi.Opaque {}

/// \brief Type of property to be added to or returned from the ::OrtCheckpointState.
abstract class OrtPropertyType {
  static const int OrtIntProperty = 0;
  static const int OrtFloatProperty = 1;
  static const int OrtStringProperty = 2;
}

/// \brief This mimics OrtDevice type constants so they can be returned in the API
abstract class OrtMemoryInfoDeviceType {
  static const int OrtMemoryInfoDeviceType_CPU = 0;
  static const int OrtMemoryInfoDeviceType_GPU = 1;
  static const int OrtMemoryInfoDeviceType_FPGA = 2;
}

/// \brief Callback function for RunAsync
///
/// \param[in] user_data User specific data that passed back to the callback
/// \param[out] outputs On succeed, outputs host inference results, on error, the value will be nullptr
/// \param[out] num_outputs Number of outputs, on error, the value will be zero
/// \param[out] status On error, status will provide details
typedef RunAsyncCallbackFn = ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void> user_data, ffi.Pointer<ffi.Pointer<OrtValue>> outputs, ffi.Size num_outputs, OrtStatusPtr status)>>;

abstract class OrtCustomOpInputOutputCharacteristic {
  static const int INPUT_OUTPUT_REQUIRED = 0;
  static const int INPUT_OUTPUT_OPTIONAL = 1;
  static const int INPUT_OUTPUT_VARIADIC = 2;
}

/// \brief The helper interface to get the right version of OrtApi
///
/// Get a pointer to this structure through ::OrtGetApiBase
final class OrtApiBase extends ffi.Struct {
  /// \brief Get a pointer to the requested version of the ::OrtApi
  ///
  /// \param[in] version Must be ::ORT_API_VERSION
  /// \return The ::OrtApi for the version requested, nullptr will be returned if this version is unsupported, for example when using a runtime
  /// older than the version created with this header file.
  ///
  /// One can call GetVersionString() to get the version of the Onnxruntime library for logging
  /// and error reporting purposes.
  external ffi.Pointer<ffi.NativeFunction<ffi.Pointer<OrtApi> Function(ffi.Uint32 version)>> GetApi;

  /// \brief Returns a null terminated string of the version of the Onnxruntime library (eg: "1.8.1")
  ///
  /// \return UTF-8 encoded version string. Do not deallocate the returned buffer.
  external ffi.Pointer<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>> GetVersionString;
}

abstract class COREMLFlags {
  static const int COREML_FLAG_USE_NONE = 0;
  static const int COREML_FLAG_USE_CPU_ONLY = 1;
  static const int COREML_FLAG_ENABLE_ON_SUBGRAPH = 2;
  static const int COREML_FLAG_ONLY_ENABLE_DEVICE_WITH_ANE = 4;
  static const int COREML_FLAG_ONLY_ALLOW_STATIC_INPUT_SHAPES = 8;
  static const int COREML_FLAG_LAST = 8;
}

const int __bool_true_false_are_defined = 1;

const int true1 = 1;

const int false1 = 0;

const int __API_TO_BE_DEPRECATED = 100000;

const int __API_TO_BE_DEPRECATED_MACOS = 100000;

const int __API_TO_BE_DEPRECATED_IOS = 100000;

const int __API_TO_BE_DEPRECATED_TVOS = 100000;

const int __API_TO_BE_DEPRECATED_WATCHOS = 100000;

const int __API_TO_BE_DEPRECATED_MACCATALYST = 100000;

const int __API_TO_BE_DEPRECATED_DRIVERKIT = 100000;

const int __MAC_10_0 = 1000;

const int __MAC_10_1 = 1010;

const int __MAC_10_2 = 1020;

const int __MAC_10_3 = 1030;

const int __MAC_10_4 = 1040;

const int __MAC_10_5 = 1050;

const int __MAC_10_6 = 1060;

const int __MAC_10_7 = 1070;

const int __MAC_10_8 = 1080;

const int __MAC_10_9 = 1090;

const int __MAC_10_10 = 101000;

const int __MAC_10_10_2 = 101002;

const int __MAC_10_10_3 = 101003;

const int __MAC_10_11 = 101100;

const int __MAC_10_11_2 = 101102;

const int __MAC_10_11_3 = 101103;

const int __MAC_10_11_4 = 101104;

const int __MAC_10_12 = 101200;

const int __MAC_10_12_1 = 101201;

const int __MAC_10_12_2 = 101202;

const int __MAC_10_12_4 = 101204;

const int __MAC_10_13 = 101300;

const int __MAC_10_13_1 = 101301;

const int __MAC_10_13_2 = 101302;

const int __MAC_10_13_4 = 101304;

const int __MAC_10_14 = 101400;

const int __MAC_10_14_1 = 101401;

const int __MAC_10_14_4 = 101404;

const int __MAC_10_14_6 = 101406;

const int __MAC_10_15 = 101500;

const int __MAC_10_15_1 = 101501;

const int __MAC_10_15_4 = 101504;

const int __MAC_10_16 = 101600;

const int __MAC_11_0 = 110000;

const int __MAC_11_1 = 110100;

const int __MAC_11_3 = 110300;

const int __MAC_11_4 = 110400;

const int __MAC_11_5 = 110500;

const int __MAC_11_6 = 110600;

const int __MAC_12_0 = 120000;

const int __MAC_12_1 = 120100;

const int __MAC_12_2 = 120200;

const int __MAC_12_3 = 120300;

const int __MAC_13_0 = 130000;

const int __MAC_13_1 = 130100;

const int __MAC_13_2 = 130200;

const int __MAC_13_3 = 130300;

const int __IPHONE_2_0 = 20000;

const int __IPHONE_2_1 = 20100;

const int __IPHONE_2_2 = 20200;

const int __IPHONE_3_0 = 30000;

const int __IPHONE_3_1 = 30100;

const int __IPHONE_3_2 = 30200;

const int __IPHONE_4_0 = 40000;

const int __IPHONE_4_1 = 40100;

const int __IPHONE_4_2 = 40200;

const int __IPHONE_4_3 = 40300;

const int __IPHONE_5_0 = 50000;

const int __IPHONE_5_1 = 50100;

const int __IPHONE_6_0 = 60000;

const int __IPHONE_6_1 = 60100;

const int __IPHONE_7_0 = 70000;

const int __IPHONE_7_1 = 70100;

const int __IPHONE_8_0 = 80000;

const int __IPHONE_8_1 = 80100;

const int __IPHONE_8_2 = 80200;

const int __IPHONE_8_3 = 80300;

const int __IPHONE_8_4 = 80400;

const int __IPHONE_9_0 = 90000;

const int __IPHONE_9_1 = 90100;

const int __IPHONE_9_2 = 90200;

const int __IPHONE_9_3 = 90300;

const int __IPHONE_10_0 = 100000;

const int __IPHONE_10_1 = 100100;

const int __IPHONE_10_2 = 100200;

const int __IPHONE_10_3 = 100300;

const int __IPHONE_11_0 = 110000;

const int __IPHONE_11_1 = 110100;

const int __IPHONE_11_2 = 110200;

const int __IPHONE_11_3 = 110300;

const int __IPHONE_11_4 = 110400;

const int __IPHONE_12_0 = 120000;

const int __IPHONE_12_1 = 120100;

const int __IPHONE_12_2 = 120200;

const int __IPHONE_12_3 = 120300;

const int __IPHONE_12_4 = 120400;

const int __IPHONE_13_0 = 130000;

const int __IPHONE_13_1 = 130100;

const int __IPHONE_13_2 = 130200;

const int __IPHONE_13_3 = 130300;

const int __IPHONE_13_4 = 130400;

const int __IPHONE_13_5 = 130500;

const int __IPHONE_13_6 = 130600;

const int __IPHONE_13_7 = 130700;

const int __IPHONE_14_0 = 140000;

const int __IPHONE_14_1 = 140100;

const int __IPHONE_14_2 = 140200;

const int __IPHONE_14_3 = 140300;

const int __IPHONE_14_5 = 140500;

const int __IPHONE_14_6 = 140600;

const int __IPHONE_14_7 = 140700;

const int __IPHONE_14_8 = 140800;

const int __IPHONE_15_0 = 150000;

const int __IPHONE_15_1 = 150100;

const int __IPHONE_15_2 = 150200;

const int __IPHONE_15_3 = 150300;

const int __IPHONE_15_4 = 150400;

const int __IPHONE_16_0 = 160000;

const int __IPHONE_16_1 = 160100;

const int __IPHONE_16_2 = 160200;

const int __IPHONE_16_3 = 160300;

const int __IPHONE_16_4 = 160400;

const int __TVOS_9_0 = 90000;

const int __TVOS_9_1 = 90100;

const int __TVOS_9_2 = 90200;

const int __TVOS_10_0 = 100000;

const int __TVOS_10_0_1 = 100001;

const int __TVOS_10_1 = 100100;

const int __TVOS_10_2 = 100200;

const int __TVOS_11_0 = 110000;

const int __TVOS_11_1 = 110100;

const int __TVOS_11_2 = 110200;

const int __TVOS_11_3 = 110300;

const int __TVOS_11_4 = 110400;

const int __TVOS_12_0 = 120000;

const int __TVOS_12_1 = 120100;

const int __TVOS_12_2 = 120200;

const int __TVOS_12_3 = 120300;

const int __TVOS_12_4 = 120400;

const int __TVOS_13_0 = 130000;

const int __TVOS_13_2 = 130200;

const int __TVOS_13_3 = 130300;

const int __TVOS_13_4 = 130400;

const int __TVOS_14_0 = 140000;

const int __TVOS_14_1 = 140100;

const int __TVOS_14_2 = 140200;

const int __TVOS_14_3 = 140300;

const int __TVOS_14_5 = 140500;

const int __TVOS_14_6 = 140600;

const int __TVOS_14_7 = 140700;

const int __TVOS_15_0 = 150000;

const int __TVOS_15_1 = 150100;

const int __TVOS_15_2 = 150200;

const int __TVOS_15_3 = 150300;

const int __TVOS_15_4 = 150400;

const int __TVOS_16_0 = 160000;

const int __TVOS_16_1 = 160100;

const int __TVOS_16_2 = 160200;

const int __TVOS_16_3 = 160300;

const int __TVOS_16_4 = 160400;

const int __WATCHOS_1_0 = 10000;

const int __WATCHOS_2_0 = 20000;

const int __WATCHOS_2_1 = 20100;

const int __WATCHOS_2_2 = 20200;

const int __WATCHOS_3_0 = 30000;

const int __WATCHOS_3_1 = 30100;

const int __WATCHOS_3_1_1 = 30101;

const int __WATCHOS_3_2 = 30200;

const int __WATCHOS_4_0 = 40000;

const int __WATCHOS_4_1 = 40100;

const int __WATCHOS_4_2 = 40200;

const int __WATCHOS_4_3 = 40300;

const int __WATCHOS_5_0 = 50000;

const int __WATCHOS_5_1 = 50100;

const int __WATCHOS_5_2 = 50200;

const int __WATCHOS_5_3 = 50300;

const int __WATCHOS_6_0 = 60000;

const int __WATCHOS_6_1 = 60100;

const int __WATCHOS_6_2 = 60200;

const int __WATCHOS_7_0 = 70000;

const int __WATCHOS_7_1 = 70100;

const int __WATCHOS_7_2 = 70200;

const int __WATCHOS_7_3 = 70300;

const int __WATCHOS_7_4 = 70400;

const int __WATCHOS_7_5 = 70500;

const int __WATCHOS_7_6 = 70600;

const int __WATCHOS_8_0 = 80000;

const int __WATCHOS_8_1 = 80100;

const int __WATCHOS_8_3 = 80300;

const int __WATCHOS_8_4 = 80400;

const int __WATCHOS_8_5 = 80500;

const int __WATCHOS_9_0 = 90000;

const int __WATCHOS_9_1 = 90100;

const int __WATCHOS_9_2 = 90200;

const int __WATCHOS_9_3 = 90300;

const int __WATCHOS_9_4 = 90400;

const int MAC_OS_X_VERSION_10_0 = 1000;

const int MAC_OS_X_VERSION_10_1 = 1010;

const int MAC_OS_X_VERSION_10_2 = 1020;

const int MAC_OS_X_VERSION_10_3 = 1030;

const int MAC_OS_X_VERSION_10_4 = 1040;

const int MAC_OS_X_VERSION_10_5 = 1050;

const int MAC_OS_X_VERSION_10_6 = 1060;

const int MAC_OS_X_VERSION_10_7 = 1070;

const int MAC_OS_X_VERSION_10_8 = 1080;

const int MAC_OS_X_VERSION_10_9 = 1090;

const int MAC_OS_X_VERSION_10_10 = 101000;

const int MAC_OS_X_VERSION_10_10_2 = 101002;

const int MAC_OS_X_VERSION_10_10_3 = 101003;

const int MAC_OS_X_VERSION_10_11 = 101100;

const int MAC_OS_X_VERSION_10_11_2 = 101102;

const int MAC_OS_X_VERSION_10_11_3 = 101103;

const int MAC_OS_X_VERSION_10_11_4 = 101104;

const int MAC_OS_X_VERSION_10_12 = 101200;

const int MAC_OS_X_VERSION_10_12_1 = 101201;

const int MAC_OS_X_VERSION_10_12_2 = 101202;

const int MAC_OS_X_VERSION_10_12_4 = 101204;

const int MAC_OS_X_VERSION_10_13 = 101300;

const int MAC_OS_X_VERSION_10_13_1 = 101301;

const int MAC_OS_X_VERSION_10_13_2 = 101302;

const int MAC_OS_X_VERSION_10_13_4 = 101304;

const int MAC_OS_X_VERSION_10_14 = 101400;

const int MAC_OS_X_VERSION_10_14_1 = 101401;

const int MAC_OS_X_VERSION_10_14_4 = 101404;

const int MAC_OS_X_VERSION_10_14_6 = 101406;

const int MAC_OS_X_VERSION_10_15 = 101500;

const int MAC_OS_X_VERSION_10_15_1 = 101501;

const int MAC_OS_X_VERSION_10_16 = 101600;

const int MAC_OS_VERSION_11_0 = 110000;

const int MAC_OS_VERSION_12_0 = 120000;

const int MAC_OS_VERSION_13_0 = 130000;

const int __DRIVERKIT_19_0 = 190000;

const int __DRIVERKIT_20_0 = 200000;

const int __DRIVERKIT_21_0 = 210000;

const int __MAC_OS_X_VERSION_MIN_REQUIRED = 130000;

const int __MAC_OS_X_VERSION_MAX_ALLOWED = 130300;

const int __ENABLE_LEGACY_MAC_AVAILABILITY = 1;

const int __DARWIN_ONLY_64_BIT_INO_T = 1;

const int __DARWIN_ONLY_UNIX_CONFORMANCE = 1;

const int __DARWIN_ONLY_VERS_1050 = 1;

const int __DARWIN_UNIX03 = 1;

const int __DARWIN_64_BIT_INO_T = 1;

const int __DARWIN_VERS_1050 = 1;

const int __DARWIN_NON_CANCELABLE = 0;

const String __DARWIN_SUF_EXTSN = '\$DARWIN_EXTSN';

const int __DARWIN_C_ANSI = 4096;

const int __DARWIN_C_FULL = 900000;

const int __DARWIN_C_LEVEL = 900000;

const int __STDC_WANT_LIB_EXT1__ = 1;

const int __DARWIN_NO_LONG_LONG = 0;

const int _DARWIN_FEATURE_64_BIT_INODE = 1;

const int _DARWIN_FEATURE_ONLY_64_BIT_INODE = 1;

const int _DARWIN_FEATURE_ONLY_VERS_1050 = 1;

const int _DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE = 1;

const int _DARWIN_FEATURE_UNIX_CONFORMANCE = 3;

const int __has_ptrcheck = 0;

const int __DARWIN_NULL = 0;

const int __PTHREAD_SIZE__ = 8176;

const int __PTHREAD_ATTR_SIZE__ = 56;

const int __PTHREAD_MUTEXATTR_SIZE__ = 8;

const int __PTHREAD_MUTEX_SIZE__ = 56;

const int __PTHREAD_CONDATTR_SIZE__ = 8;

const int __PTHREAD_COND_SIZE__ = 40;

const int __PTHREAD_ONCE_SIZE__ = 8;

const int __PTHREAD_RWLOCK_SIZE__ = 192;

const int __PTHREAD_RWLOCKATTR_SIZE__ = 16;

const int __DARWIN_WCHAR_MAX = 2147483647;

const int __DARWIN_WCHAR_MIN = -2147483648;

const int __DARWIN_WEOF = -1;

const int _FORTIFY_SOURCE = 2;

const int __DARWIN_NSIG = 32;

const int NSIG = 32;

const int _ARM_SIGNAL_ = 1;

const int SIGHUP = 1;

const int SIGINT = 2;

const int SIGQUIT = 3;

const int SIGILL = 4;

const int SIGTRAP = 5;

const int SIGABRT = 6;

const int SIGIOT = 6;

const int SIGEMT = 7;

const int SIGFPE = 8;

const int SIGKILL = 9;

const int SIGBUS = 10;

const int SIGSEGV = 11;

const int SIGSYS = 12;

const int SIGPIPE = 13;

const int SIGALRM = 14;

const int SIGTERM = 15;

const int SIGURG = 16;

const int SIGSTOP = 17;

const int SIGTSTP = 18;

const int SIGCONT = 19;

const int SIGCHLD = 20;

const int SIGTTIN = 21;

const int SIGTTOU = 22;

const int SIGIO = 23;

const int SIGXCPU = 24;

const int SIGXFSZ = 25;

const int SIGVTALRM = 26;

const int SIGPROF = 27;

const int SIGWINCH = 28;

const int SIGINFO = 29;

const int SIGUSR1 = 30;

const int SIGUSR2 = 31;

const int USER_ADDR_NULL = 0;

const int __DARWIN_OPAQUE_ARM_THREAD_STATE64 = 0;

const int SIGEV_NONE = 0;

const int SIGEV_SIGNAL = 1;

const int SIGEV_THREAD = 3;

const int ILL_NOOP = 0;

const int ILL_ILLOPC = 1;

const int ILL_ILLTRP = 2;

const int ILL_PRVOPC = 3;

const int ILL_ILLOPN = 4;

const int ILL_ILLADR = 5;

const int ILL_PRVREG = 6;

const int ILL_COPROC = 7;

const int ILL_BADSTK = 8;

const int FPE_NOOP = 0;

const int FPE_FLTDIV = 1;

const int FPE_FLTOVF = 2;

const int FPE_FLTUND = 3;

const int FPE_FLTRES = 4;

const int FPE_FLTINV = 5;

const int FPE_FLTSUB = 6;

const int FPE_INTDIV = 7;

const int FPE_INTOVF = 8;

const int SEGV_NOOP = 0;

const int SEGV_MAPERR = 1;

const int SEGV_ACCERR = 2;

const int BUS_NOOP = 0;

const int BUS_ADRALN = 1;

const int BUS_ADRERR = 2;

const int BUS_OBJERR = 3;

const int TRAP_BRKPT = 1;

const int TRAP_TRACE = 2;

const int CLD_NOOP = 0;

const int CLD_EXITED = 1;

const int CLD_KILLED = 2;

const int CLD_DUMPED = 3;

const int CLD_TRAPPED = 4;

const int CLD_STOPPED = 5;

const int CLD_CONTINUED = 6;

const int POLL_IN = 1;

const int POLL_OUT = 2;

const int POLL_MSG = 3;

const int POLL_ERR = 4;

const int POLL_PRI = 5;

const int POLL_HUP = 6;

const int SA_ONSTACK = 1;

const int SA_RESTART = 2;

const int SA_RESETHAND = 4;

const int SA_NOCLDSTOP = 8;

const int SA_NODEFER = 16;

const int SA_NOCLDWAIT = 32;

const int SA_SIGINFO = 64;

const int SA_USERTRAMP = 256;

const int SA_64REGSET = 512;

const int SA_USERSPACE_MASK = 127;

const int SIG_BLOCK = 1;

const int SIG_UNBLOCK = 2;

const int SIG_SETMASK = 3;

const int SI_USER = 65537;

const int SI_QUEUE = 65538;

const int SI_TIMER = 65539;

const int SI_ASYNCIO = 65540;

const int SI_MESGQ = 65541;

const int SS_ONSTACK = 1;

const int SS_DISABLE = 4;

const int MINSIGSTKSZ = 32768;

const int SIGSTKSZ = 131072;

const int SV_ONSTACK = 1;

const int SV_INTERRUPT = 2;

const int SV_RESETHAND = 4;

const int SV_NODEFER = 16;

const int SV_NOCLDSTOP = 8;

const int SV_SIGINFO = 64;

const int __WORDSIZE = 64;

const int INT8_MAX = 127;

const int INT16_MAX = 32767;

const int INT32_MAX = 2147483647;

const int INT64_MAX = 9223372036854775807;

const int INT8_MIN = -128;

const int INT16_MIN = -32768;

const int INT32_MIN = -2147483648;

const int INT64_MIN = -9223372036854775808;

const int UINT8_MAX = 255;

const int UINT16_MAX = 65535;

const int UINT32_MAX = 4294967295;

const int UINT64_MAX = -1;

const int INT_LEAST8_MIN = -128;

const int INT_LEAST16_MIN = -32768;

const int INT_LEAST32_MIN = -2147483648;

const int INT_LEAST64_MIN = -9223372036854775808;

const int INT_LEAST8_MAX = 127;

const int INT_LEAST16_MAX = 32767;

const int INT_LEAST32_MAX = 2147483647;

const int INT_LEAST64_MAX = 9223372036854775807;

const int UINT_LEAST8_MAX = 255;

const int UINT_LEAST16_MAX = 65535;

const int UINT_LEAST32_MAX = 4294967295;

const int UINT_LEAST64_MAX = -1;

const int INT_FAST8_MIN = -128;

const int INT_FAST16_MIN = -32768;

const int INT_FAST32_MIN = -2147483648;

const int INT_FAST64_MIN = -9223372036854775808;

const int INT_FAST8_MAX = 127;

const int INT_FAST16_MAX = 32767;

const int INT_FAST32_MAX = 2147483647;

const int INT_FAST64_MAX = 9223372036854775807;

const int UINT_FAST8_MAX = 255;

const int UINT_FAST16_MAX = 65535;

const int UINT_FAST32_MAX = 4294967295;

const int UINT_FAST64_MAX = -1;

const int INTPTR_MAX = 9223372036854775807;

const int INTPTR_MIN = -9223372036854775808;

const int UINTPTR_MAX = -1;

const int INTMAX_MAX = 9223372036854775807;

const int UINTMAX_MAX = -1;

const int INTMAX_MIN = -9223372036854775808;

const int PTRDIFF_MIN = -9223372036854775808;

const int PTRDIFF_MAX = 9223372036854775807;

const int SIZE_MAX = -1;

const int RSIZE_MAX = 9223372036854775807;

const int WCHAR_MAX = 2147483647;

const int WCHAR_MIN = -2147483648;

const int WINT_MIN = -2147483648;

const int WINT_MAX = 2147483647;

const int SIG_ATOMIC_MIN = -2147483648;

const int SIG_ATOMIC_MAX = 2147483647;

const int PRIO_PROCESS = 0;

const int PRIO_PGRP = 1;

const int PRIO_USER = 2;

const int PRIO_DARWIN_THREAD = 3;

const int PRIO_DARWIN_PROCESS = 4;

const int PRIO_MIN = -20;

const int PRIO_MAX = 20;

const int PRIO_DARWIN_BG = 4096;

const int PRIO_DARWIN_NONUI = 4097;

const int RUSAGE_SELF = 0;

const int RUSAGE_CHILDREN = -1;

const int RUSAGE_INFO_V0 = 0;

const int RUSAGE_INFO_V1 = 1;

const int RUSAGE_INFO_V2 = 2;

const int RUSAGE_INFO_V3 = 3;

const int RUSAGE_INFO_V4 = 4;

const int RUSAGE_INFO_V5 = 5;

const int RUSAGE_INFO_V6 = 6;

const int RUSAGE_INFO_CURRENT = 6;

const int RU_PROC_RUNS_RESLIDE = 1;

const int RLIM_INFINITY = 9223372036854775807;

const int RLIM_SAVED_MAX = 9223372036854775807;

const int RLIM_SAVED_CUR = 9223372036854775807;

const int RLIMIT_CPU = 0;

const int RLIMIT_FSIZE = 1;

const int RLIMIT_DATA = 2;

const int RLIMIT_STACK = 3;

const int RLIMIT_CORE = 4;

const int RLIMIT_AS = 5;

const int RLIMIT_RSS = 5;

const int RLIMIT_MEMLOCK = 6;

const int RLIMIT_NPROC = 7;

const int RLIMIT_NOFILE = 8;

const int RLIM_NLIMITS = 9;

const int _RLIMIT_POSIX_FLAG = 4096;

const int RLIMIT_WAKEUPS_MONITOR = 1;

const int RLIMIT_CPU_USAGE_MONITOR = 2;

const int RLIMIT_THREAD_CPULIMITS = 3;

const int RLIMIT_FOOTPRINT_INTERVAL = 4;

const int WAKEMON_ENABLE = 1;

const int WAKEMON_DISABLE = 2;

const int WAKEMON_GET_PARAMS = 4;

const int WAKEMON_SET_DEFAULTS = 8;

const int WAKEMON_MAKE_FATAL = 16;

const int CPUMON_MAKE_FATAL = 4096;

const int FOOTPRINT_INTERVAL_RESET = 1;

const int IOPOL_TYPE_DISK = 0;

const int IOPOL_TYPE_VFS_ATIME_UPDATES = 2;

const int IOPOL_TYPE_VFS_MATERIALIZE_DATALESS_FILES = 3;

const int IOPOL_TYPE_VFS_STATFS_NO_DATA_VOLUME = 4;

const int IOPOL_TYPE_VFS_TRIGGER_RESOLVE = 5;

const int IOPOL_TYPE_VFS_IGNORE_CONTENT_PROTECTION = 6;

const int IOPOL_TYPE_VFS_IGNORE_PERMISSIONS = 7;

const int IOPOL_TYPE_VFS_SKIP_MTIME_UPDATE = 8;

const int IOPOL_TYPE_VFS_ALLOW_LOW_SPACE_WRITES = 9;

const int IOPOL_TYPE_VFS_DISALLOW_RW_FOR_O_EVTONLY = 10;

const int IOPOL_SCOPE_PROCESS = 0;

const int IOPOL_SCOPE_THREAD = 1;

const int IOPOL_SCOPE_DARWIN_BG = 2;

const int IOPOL_DEFAULT = 0;

const int IOPOL_IMPORTANT = 1;

const int IOPOL_PASSIVE = 2;

const int IOPOL_THROTTLE = 3;

const int IOPOL_UTILITY = 4;

const int IOPOL_STANDARD = 5;

const int IOPOL_APPLICATION = 5;

const int IOPOL_NORMAL = 1;

const int IOPOL_ATIME_UPDATES_DEFAULT = 0;

const int IOPOL_ATIME_UPDATES_OFF = 1;

const int IOPOL_MATERIALIZE_DATALESS_FILES_DEFAULT = 0;

const int IOPOL_MATERIALIZE_DATALESS_FILES_OFF = 1;

const int IOPOL_MATERIALIZE_DATALESS_FILES_ON = 2;

const int IOPOL_VFS_STATFS_NO_DATA_VOLUME_DEFAULT = 0;

const int IOPOL_VFS_STATFS_FORCE_NO_DATA_VOLUME = 1;

const int IOPOL_VFS_TRIGGER_RESOLVE_DEFAULT = 0;

const int IOPOL_VFS_TRIGGER_RESOLVE_OFF = 1;

const int IOPOL_VFS_CONTENT_PROTECTION_DEFAULT = 0;

const int IOPOL_VFS_CONTENT_PROTECTION_IGNORE = 1;

const int IOPOL_VFS_IGNORE_PERMISSIONS_OFF = 0;

const int IOPOL_VFS_IGNORE_PERMISSIONS_ON = 1;

const int IOPOL_VFS_SKIP_MTIME_UPDATE_OFF = 0;

const int IOPOL_VFS_SKIP_MTIME_UPDATE_ON = 1;

const int IOPOL_VFS_ALLOW_LOW_SPACE_WRITES_OFF = 0;

const int IOPOL_VFS_ALLOW_LOW_SPACE_WRITES_ON = 1;

const int IOPOL_VFS_DISALLOW_RW_FOR_O_EVTONLY_DEFAULT = 0;

const int IOPOL_VFS_DISALLOW_RW_FOR_O_EVTONLY_ON = 1;

const int WNOHANG = 1;

const int WUNTRACED = 2;

const int WCOREFLAG = 128;

const int _WSTOPPED = 127;

const int WEXITED = 4;

const int WSTOPPED = 8;

const int WCONTINUED = 16;

const int WNOWAIT = 32;

const int WAIT_ANY = -1;

const int WAIT_MYPGRP = 0;

const int _QUAD_HIGHWORD = 1;

const int _QUAD_LOWWORD = 0;

const int __DARWIN_LITTLE_ENDIAN = 1234;

const int __DARWIN_BIG_ENDIAN = 4321;

const int __DARWIN_PDP_ENDIAN = 3412;

const int __DARWIN_BYTE_ORDER = 1234;

const int LITTLE_ENDIAN = 1234;

const int BIG_ENDIAN = 4321;

const int PDP_ENDIAN = 3412;

const int BYTE_ORDER = 1234;

const int NULL = 0;

const int EXIT_FAILURE = 1;

const int EXIT_SUCCESS = 0;

const int RAND_MAX = 2147483647;

const int ORT_API_VERSION = 16;

const String ORT_FILE = '/var/folders/v8/cddv063n39799991xj6y4r4m0000gn/T/R9SfP3/temp_for_macros.hpp';
